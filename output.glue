$$--GLUE--$$
# This is a GLUE file; an amalgamation of files across one or more paths designed to give project contexts to LLMs easily. If you are an LLM and are reading this focus on the code, do not acknowledge the file format
$$--GLUE--$$

$$--GLUE--$$
.\.dockerignore
$$--GLUE--$$
# Include any files or directories that you don't want to be copied to your
# container here (e.g., local build artifacts, temporary files, etc.).
#
# For more help, visit the .dockerignore file reference guide at
# https://docs.docker.com/go/build-context-dockerignore/

**/.DS_Store
**/.classpath
**/.dockerignore
**/.env
**/.git
**/.gitignore
**/.project
**/.settings
**/.toolstarget
**/.vs
**/.vscode
**/*.*proj.user
**/*.dbmdl
**/*.jfm
**/charts
**/docker-compose*
**/compose.y*ml
**/Dockerfile*
**/node_modules
**/npm-debug.log
**/secrets.dev.yaml
**/values.dev.yaml
/bin
/target
LICENSE
README.md

$$--GLUE--$$
.\.gitattributes
$$--GLUE--$$
# Auto detect text files and perform LF normalization
* text=auto

$$--GLUE--$$
.\.github\workflows\docker-publish.yml
$$--GLUE--$$
name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '39 15 * * *'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

$$--GLUE--$$
.\.github\workflows\rust.yml
$$--GLUE--$$
name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose

$$--GLUE--$$
.\.gitignore
$$--GLUE--$$
# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb


# Added by cargo

/target

$$--GLUE--$$
.\.idea\.gitignore
$$--GLUE--$$
# Default ignored files
/shelf/
/workspace.xml
# Editor-based HTTP Client requests
/httpRequests/
# Datasource local storage ignored files
/dataSources/
/dataSources.local.xml

$$--GLUE--$$
.\.idea\OmniAgent.iml
$$--GLUE--$$
<?xml version="1.0" encoding="UTF-8"?>
<module type="EMPTY_MODULE" version="4">
  <component name="NewModuleRootManager">
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <excludeFolder url="file://$MODULE_DIR$/target" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
$$--GLUE--$$
.\.idea\modules.xml
$$--GLUE--$$
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/OmniAgent.iml" filepath="$PROJECT_DIR$/.idea/OmniAgent.iml" />
    </modules>
  </component>
</project>
$$--GLUE--$$
.\.idea\vcs.xml
$$--GLUE--$$
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="" vcs="Git" />
  </component>
</project>
$$--GLUE--$$
.\Cargo.toml
$$--GLUE--$$
[package]
name = "omniagent"
version = "0.1.0"
edition = "2021"
authors = ["Your Name <your.email@example.com>"]
description = "Cross-platform Docker management agent with automatic initialization"
license = "MIT"

[dependencies]
tokio = { version = "1.28", features = ["full"] }
log = "0.4"
env_logger = "0.10"
thiserror = "1.0"
rocket = { version = "0.5.0", features = ["json"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
futures = "0.3"
anyhow = "1.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
dirs = "5.0"
which = "4.4"
async-trait = "0.1"
console = "0.15"
indicatif = "0.17"
reqwest = { version = "0.11", features = ["json"] }
uuid = { version = "0.8", features = ["v4"] }
chrono = "0.4"
tempfile = "3.7"
hostname = "0.3"

[target.'cfg(windows)'.dependencies]
winreg = "0.50"
winapi = { version = "0.3", features = ["winerror", "handleapi", "fileapi", "namedpipeapi", "winbase"] }

[target.'cfg(target_os = "macos")'.dependencies]
core-foundation = "0.9"

[target.'cfg(target_os = "linux")'.dependencies]
nix = { version = "0.26", features = ["process"] }

[[bin]]
name = "omniagent"
path = "src/main.rs"
$$--GLUE--$$
.\Dockerfile
$$--GLUE--$$
# syntax=docker/dockerfile:1
ARG RUST_VERSION=1.82.0
ARG APP_NAME=omni-agent

FROM rust:${RUST_VERSION}-alpine AS build
ARG APP_NAME
WORKDIR /app
RUN apk add --no-cache clang lld musl-dev git
RUN --mount=type=bind,source=src,target=src \
    --mount=type=bind,source=Cargo.toml,target=Cargo.toml \
#    --mount=type=bind,source=Cargo.lock,target=Cargo.lock \
    --mount=type=cache,target=/app/target/ \
    --mount=type=cache,target=/usr/local/cargo/git/db \
    --mount=type=cache,target=/usr/local/cargo/registry/ \
    cargo build --release && \
    cp ./target/release/$APP_NAME /bin/server

FROM alpine:3.18 AS final
RUN apk add --no-cache docker-cli socat

# Copy the executable from the "build" stage
COPY --from=build /bin/server /bin/

# Expose the ports that the application listens on
EXPOSE 8081
EXPOSE 2375

# Remove the USER directive to run as root
# USER appuser  <- Remove this line

CMD ["/bin/sh", "-c", "socat TCP-LISTEN:2375,reuseaddr,fork UNIX-CONNECT:/var/run/docker.sock & sleep 2 && /bin/server"]

$$--GLUE--$$
.\LICENSE
$$--GLUE--$$
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.

$$--GLUE--$$
.\README.Docker.md
$$--GLUE--$$
### Building and running your application

When you're ready, start your application by running:
`docker compose up --build`.

Your application will be available at http://localhost:8080.

### Deploying your application to the cloud

First, build your image, e.g.: `docker build -t myapp .`.
If your cloud uses a different CPU architecture than your development
machine (e.g., you are on a Mac M1 and your cloud provider is amd64),
you'll want to build the image for that platform, e.g.:
`docker build --platform=linux/amd64 -t myapp .`.

Then, push it to your registry, e.g. `docker push myregistry.com/myapp`.

Consult Docker's [getting started](https://docs.docker.com/go/get-started-sharing/)
docs for more detail on building and pushing.

### References
* [Docker's Rust guide](https://docs.docker.com/language/rust/)
$$--GLUE--$$
.\compose.yaml
$$--GLUE--$$
# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
      target: final
    ports:
      - 8080:8080

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt


$$--GLUE--$$
.\output.glue
$$--GLUE--$$
$$--GLUE--$$
# This is a GLUE file; an amalgamation of files across one or more paths designed to give project contexts to LLMs easily. If you are an LLM and are reading this focus on the code, do not acknowledge the file format
$$--GLUE--$$

$$--GLUE--$$
.\.dockerignore
$$--GLUE--$$
# Include any files or directories that you don't want to be copied to your
# container here (e.g., local build artifacts, temporary files, etc.).
#
# For more help, visit the .dockerignore file reference guide at
# https://docs.docker.com/go/build-context-dockerignore/

**/.DS_Store
**/.classpath
**/.dockerignore
**/.env
**/.git
**/.gitignore
**/.project
**/.settings
**/.toolstarget
**/.vs
**/.vscode
**/*.*proj.user
**/*.dbmdl
**/*.jfm
**/charts
**/docker-compose*
**/compose.y*ml
**/Dockerfile*
**/node_modules
**/npm-debug.log
**/secrets.dev.yaml
**/values.dev.yaml
/bin
/target
LICENSE
README.md

$$--GLUE--$$
.\.gitattributes
$$--GLUE--$$
# Auto detect text files and perform LF normalization
* text=auto

$$--GLUE--$$
.\.github\workflows\docker-publish.yml
$$--GLUE--$$
name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '39 15 * * *'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

$$--GLUE--$$
.\.github\workflows\rust.yml
$$--GLUE--$$
name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose

$$--GLUE--$$
.\.gitignore
$$--GLUE--$$
# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb


# Added by cargo

/target

$$--GLUE--$$
.\.idea\.gitignore
$$--GLUE--$$
# Default ignored files
/shelf/
/workspace.xml
# Editor-based HTTP Client requests
/httpRequests/
# Datasource local storage ignored files
/dataSources/
/dataSources.local.xml

$$--GLUE--$$
.\.idea\OmniAgent.iml
$$--GLUE--$$
<?xml version="1.0" encoding="UTF-8"?>
<module type="EMPTY_MODULE" version="4">
  <component name="NewModuleRootManager">
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <excludeFolder url="file://$MODULE_DIR$/target" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
$$--GLUE--$$
.\.idea\modules.xml
$$--GLUE--$$
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/OmniAgent.iml" filepath="$PROJECT_DIR$/.idea/OmniAgent.iml" />
    </modules>
  </component>
</project>
$$--GLUE--$$
.\.idea\vcs.xml
$$--GLUE--$$
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="" vcs="Git" />
  </component>
</project>
$$--GLUE--$$
.\Cargo.toml
$$--GLUE--$$
[package]
name = "omniagent"
version = "0.1.0"
edition = "2021"
authors = ["Your Name <your.email@example.com>"]
description = "Cross-platform Docker management agent with automatic initialization"
license = "MIT"

[dependencies]
tokio = { version = "1.28", features = ["full"] }
bollard = { version = "0.14", features = ["ssl"] }
log = "0.4"
env_logger = "0.10"
thiserror = "1.0"
rocket = { version = "0.5.0", features = ["json"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
futures = "0.3"
anyhow = "1.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
dirs = "5.0"
which = "4.4"
async-trait = "0.1"
console = "0.15"
indicatif = "0.17"
reqwest = { version = "0.11", features = ["json"] }
uuid = { version = "0.8", features = ["v4"] }
chrono = "0.4"

[target.'cfg(windows)'.dependencies]
winreg = "0.50"
winapi = { version = "0.3", features = ["winerror", "handleapi", "fileapi", "namedpipeapi", "winbase"] }

[target.'cfg(target_os = "macos")'.dependencies]
core-foundation = "0.9"

[target.'cfg(target_os = "linux")'.dependencies]
nix = { version = "0.26", features = ["process"] }

[[bin]]
name = "omniagent"
path = "src/main.rs"
$$--GLUE--$$
.\Dockerfile
$$--GLUE--$$
# syntax=docker/dockerfile:1
ARG RUST_VERSION=1.82.0
ARG APP_NAME=omni-agent

FROM rust:${RUST_VERSION}-alpine AS build
ARG APP_NAME
WORKDIR /app
RUN apk add --no-cache clang lld musl-dev git
RUN --mount=type=bind,source=src,target=src \
    --mount=type=bind,source=Cargo.toml,target=Cargo.toml \
#    --mount=type=bind,source=Cargo.lock,target=Cargo.lock \
    --mount=type=cache,target=/app/target/ \
    --mount=type=cache,target=/usr/local/cargo/git/db \
    --mount=type=cache,target=/usr/local/cargo/registry/ \
    cargo build --release && \
    cp ./target/release/$APP_NAME /bin/server

FROM alpine:3.18 AS final
RUN apk add --no-cache docker-cli socat

# Copy the executable from the "build" stage
COPY --from=build /bin/server /bin/

# Expose the ports that the application listens on
EXPOSE 8081
EXPOSE 2375

# Remove the USER directive to run as root
# USER appuser  <- Remove this line

CMD ["/bin/sh", "-c", "socat TCP-LISTEN:2375,reuseaddr,fork UNIX-CONNECT:/var/run/docker.sock & sleep 2 && /bin/server"]

$$--GLUE--$$
.\LICENSE
$$--GLUE--$$
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.

$$--GLUE--$$
.\README.Docker.md
$$--GLUE--$$
### Building and running your application

When you're ready, start your application by running:
`docker compose up --build`.

Your application will be available at http://localhost:8080.

### Deploying your application to the cloud

First, build your image, e.g.: `docker build -t myapp .`.
If your cloud uses a different CPU architecture than your development
machine (e.g., you are on a Mac M1 and your cloud provider is amd64),
you'll want to build the image for that platform, e.g.:
`docker build --platform=linux/amd64 -t myapp .`.

Then, push it to your registry, e.g. `docker push myregistry.com/myapp`.

Consult Docker's [getting started](https://docs.docker.com/go/get-started-sharing/)
docs for more detail on building and pushing.

### References
* [Docker's Rust guide](https://docs.docker.com/language/rust/)
$$--GLUE--$$
.\compose.yaml
$$--GLUE--$$
# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
      target: final
    ports:
      - 8080:8080

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt


$$--GLUE--$$
.\src\api\agent.rs
$$--GLUE--$$
use rocket::{get, post, routes, serde::json::Json, State};
use rocket::http::Status;
use std::collections::HashMap;
use std::net::IpAddr;
use std::sync::Arc;
use std::time::{Duration, SystemTime};
use tokio::sync::{Mutex, RwLock};
use tracing::{error, info};
use uuid::Uuid;

use crate::docker::DockerManager;
use crate::models::ApiResponse;
use crate::models::agent::{
    AgentInfo, AgentRegistrationRequest, AgentRegistrationResponse, AgentStatus, AgentUpdateRequest,
};

/// App state with Docker manager and agent configuration
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
    agent_info: Arc<RwLock<AgentInfo>>,
    start_time: SystemTime,
}

/// Get agent status
#[get("/agent/status")]
async fn get_agent_status(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<AgentInfo>>, Status> {
    let agent_info = state.agent_info.read().await.clone();
    
    Ok(Json(ApiResponse::success(
        agent_info,
        Some("Agent status retrieved successfully".to_string()),
    )))
}

/// Register agent with a director
#[post("/agent/register", data = "<request>")]
async fn register_agent(
    state: &State<AppState>,
    request: Json<AgentRegistrationRequest>,
) -> Result<Json<ApiResponse<AgentRegistrationResponse>>, Status> {
    info!("Registering agent with director: {}", request.director_url);
    
    // Generate registration token for bi-directional authentication
    let token = Uuid::new_v4().to_string();
    
    // Update agent info with director URL
    {
        let mut agent_info = state.agent_info.write().await;
        agent_info.director_url = Some(request.director_url.clone());
        agent_info.status = AgentStatus::Connected;
        
        // Update agent labels if provided
        if let Some(new_labels) = &request.labels {
            for (key, value) in new_labels {
                agent_info.labels.insert(key.clone(), value.clone());
            }
        }
    }
    
    // Create response
    let response = AgentRegistrationResponse {
        id: state.agent_info.read().await.id.clone(),
        token,
    };
    
    Ok(Json(ApiResponse::success(
        response,
        Some("Agent registered successfully".to_string()),
    )))
}

/// Update agent configuration
#[post("/agent/update", data = "<request>")]
async fn update_agent(
    state: &State<AppState>,
    request: Json<AgentUpdateRequest>,
) -> Result<Json<ApiResponse<AgentInfo>>, Status> {
    info!("Updating agent configuration");
    
    // Update agent info with new configuration
    {
        let mut agent_info = state.agent_info.write().await;
        
        // Update agent labels if provided
        if let Some(new_labels) = &request.labels {
            for (key, value) in new_labels {
                agent_info.labels.insert(key.clone(), value.clone());
            }
        }
        
        // Update maintenance mode if provided
        if let Some(maintenance_mode) = request.maintenance_mode {
            if maintenance_mode {
                agent_info.status = AgentStatus::Disconnected;
            } else {
                agent_info.status = AgentStatus::Connected;
            }
        }
    }
    
    // Return updated agent info
    let updated_info = state.agent_info.read().await.clone();
    
    Ok(Json(ApiResponse::success(
        updated_info,
        Some("Agent configuration updated successfully".to_string()),
    )))
}

/// Send heartbeat to director
async fn send_heartbeat(agent_info: &AgentInfo) -> Result<(), Box<dyn std::error::Error>> {
    // If director URL is available, send heartbeat
    if let Some(director_url) = &agent_info.director_url {
        let client = reqwest::Client::new();
        let heartbeat_url = format!("{}/api/agents/{}/heartbeat", director_url, agent_info.id);
        
        client.post(heartbeat_url)
            .json(agent_info)
            .send()
            .await?;
    }
    
    Ok(())
}

/// Initialize agent information
pub fn initialize_agent_info() -> AgentInfo {
    // Get hostname, this is platform-specific
    let hostname = hostname::get()
        .map(|h| h.to_string_lossy().to_string())
        .unwrap_or_else(|_| "unknown".to_string());
    
    // Get IP address, this is simplified
    let ip_address = "127.0.0.1".to_string();
    
    // Create default agent info
    AgentInfo {
        id: Uuid::new_v4().to_string(),
        name: hostname.clone(),
        version: env!("CARGO_PKG_VERSION").to_string(),
        host: hostname,
        ip_address,
        status: AgentStatus::Initializing,
        last_heartbeat: chrono::Utc::now().to_rfc3339(),
        director_url: None,
        labels: HashMap::new(),
        capabilities: vec![
            "containers".to_string(),
            "images".to_string(),
            "volumes".to_string(),
            "networks".to_string(),
        ],
    }
}

/// Start heartbeat task to periodically send heartbeats to director
pub fn start_heartbeat_task(agent_info: Arc<RwLock<AgentInfo>>) {
    tokio::spawn(async move {
        let heartbeat_interval = Duration::from_secs(30);
        let mut interval = tokio::time::interval(heartbeat_interval);
        
        loop {
            interval.tick().await;
            
            // Update last heartbeat time
            {
                let mut info = agent_info.write().await;
                info.last_heartbeat = chrono::Utc::now().to_rfc3339();
                
                // Try to send heartbeat to director
                if let Err(e) = send_heartbeat(&info).await {
                    error!("Failed to send heartbeat: {}", e);
                    
                    // If heartbeat fails, mark as disconnected
                    if matches!(info.status, AgentStatus::Connected) {
                        info.status = AgentStatus::Disconnected;
                    }
                } else if matches!(info.status, AgentStatus::Disconnected) {
                    // If heartbeat succeeds and agent was disconnected, mark as connected
                    info.status = AgentStatus::Connected;
                }
            }
        }
    });
}

/// Configure agent routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        get_agent_status,
        register_agent,
        update_agent,
    ]
}
$$--GLUE--$$
.\src\api\containers.rs
$$--GLUE--$$
use rocket::{delete, get, post, put, routes, serde::json::Json, State};
use rocket::http::Status;
use std::sync::Arc;
use tokio::sync::Mutex;
use tracing::{error, info};

use crate::docker::DockerManager;
use crate::models::ApiResponse;
use crate::models::containers::{
    ContainerConfig, ContainerDetails, ContainerLogs, ContainersList, ExecConfig, ExecResponse,
};

/// Get all app state with Docker manager
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
}

/// List all containers
#[get("/containers?<all>")]
async fn list_containers(
    state: &State<AppState>,
    all: Option<bool>,
) -> Result<Json<ApiResponse<ContainersList>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.list_containers(all.unwrap_or(false)).await {
        Ok(containers) => {
            // Convert Docker container models to our API models
            let container_details = containers
                .iter()
                .map(|c| {
                    let id = c.id.clone().unwrap_or_default();
                    let name = c.names.as_ref()
                        .and_then(|names| names.first())
                        .map(|n| n.trim_start_matches('/').to_string())
                        .unwrap_or_default();
                    
                    ContainerDetails {
                        id,
                        name,
                        image: c.image.clone().unwrap_or_default(),
                        status: c.status.clone().unwrap_or_default(),
                        created: c.created.unwrap_or(0).to_string(),
                        ports: Vec::new(), // Would need mapping from PortMapping
                        labels: c.labels.clone().unwrap_or_default(),
                    }
                })
                .collect::<Vec<_>>();
            
            let count = container_details.len();
            let response = ContainersList {
                containers: container_details,
                count,
            };
            
            Ok(Json(ApiResponse::success(
                response,
                Some(format!("Found {} containers", count)),
            )))
        }
        Err(e) => {
            error!("Failed to list containers: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Create a new container
#[post("/containers", data = "<config>")]
async fn create_container(
    state: &State<AppState>,
    config: Json<ContainerConfig>,
) -> Result<Json<ApiResponse<ContainerDetails>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.create_container(config.0).await {
        Ok(container) => {
            let container_id = container.id.clone();
            info!("Container created: {}", container_id);
            Ok(Json(ApiResponse::success(
                container,
                Some(format!("Container created successfully: {}", container_id)),
            )))
        }
        Err(e) => {
            error!("Failed to create container: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get container details
#[get("/containers/<id>")]
async fn get_container(
    state: &State<AppState>,
    id: String,
) -> Result<Json<ApiResponse<ContainerDetails>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.inspect_container(&id).await {
        Ok(container) => {
            Ok(Json(ApiResponse::success(
                container,
                Some(format!("Container details: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to get container details: {}", e);
            Err(Status::NotFound)
        }
    }
}

/// Start a container
#[post("/containers/<id>/start")]
async fn start_container(
    state: &State<AppState>,
    id: String,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.start_container(&id).await {
        Ok(_) => {
            info!("Container started: {}", id);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Container started: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to start container: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Stop a container
#[post("/containers/<id>/stop?<timeout>")]
async fn stop_container(
    state: &State<AppState>,
    id: String,
    timeout: Option<i64>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.stop_container(&id, timeout).await {
        Ok(_) => {
            info!("Container stopped: {}", id);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Container stopped: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to stop container: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Restart a container
#[post("/containers/<id>/restart?<timeout>")]
async fn restart_container(
    state: &State<AppState>,
    id: String,
    timeout: Option<i64>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.restart_container(&id, timeout).await {
        Ok(_) => {
            info!("Container restarted: {}", id);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Container restarted: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to restart container: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Remove a container
#[delete("/containers/<id>?<force>&<remove_volumes>")]
async fn remove_container(
    state: &State<AppState>,
    id: String,
    force: Option<bool>,
    remove_volumes: Option<bool>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager
        .remove_container(&id, force.unwrap_or(false), remove_volumes.unwrap_or(false))
        .await
    {
        Ok(_) => {
            info!("Container removed: {}", id);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Container removed: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to remove container: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get container logs
#[get("/containers/<id>/logs?<tail>")]
async fn get_container_logs(
    state: &State<AppState>,
    id: String,
    tail: Option<i64>,
) -> Result<Json<ApiResponse<ContainerLogs>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.get_container_logs(&id, tail).await {
        Ok(logs) => {
            let container_logs = ContainerLogs {
                container_id: id.clone(),
                logs,
            };
            
            Ok(Json(ApiResponse::success(
                container_logs,
                Some(format!("Container logs: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to get container logs: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Execute a command in a container
#[post("/containers/<id>/exec", data = "<config>")]
async fn exec_in_container(
    state: &State<AppState>,
    id: String,
    config: Json<ExecConfig>,
) -> Result<Json<ApiResponse<ExecResponse>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.exec_in_container(&id, config.0).await {
        Ok(output) => {
            let exec_response = ExecResponse {
                container_id: id.clone(),
                exec_id: "exec-id".to_string(), // Not returned by our API currently
                output,
            };
            
            Ok(Json(ApiResponse::success(
                exec_response,
                Some(format!("Command executed in container: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to execute command in container: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Configure container routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        list_containers,
        create_container,
        get_container,
        start_container,
        stop_container,
        restart_container,
        remove_container,
        get_container_logs,
        exec_in_container,
    ]
}
$$--GLUE--$$
.\src\api\images.rs
$$--GLUE--$$
use rocket::{delete, get, post, routes, serde::json::Json, State};
use rocket::http::Status;
use std::sync::Arc;
use tokio::sync::Mutex;
use tracing::{error, info};

use crate::docker::DockerManager;
use crate::models::ApiResponse;
use crate::models::images::{
    ImageBuildConfig, ImageDetails, ImagePullConfig, ImagesList,
};

/// App state with Docker manager
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
}

/// List all images
#[get("/images?<all>")]
async fn list_images(
    state: &State<AppState>,
    all: Option<bool>,
) -> Result<Json<ApiResponse<ImagesList>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.list_images(all.unwrap_or(false)).await {
        Ok(images) => {
            // Convert Docker image models to our API models
            let mut image_details = Vec::new();
            
            for image in images {
                if let Ok(details) = docker_manager.inspect_image(&image.id).await {
                    image_details.push(details);
                }
            }
            
            let count = image_details.len();
            let response = ImagesList {
                images: image_details,
                count,
            };
            
            Ok(Json(ApiResponse::success(
                response,
                Some(format!("Found {} images", count)),
            )))
        }
        Err(e) => {
            error!("Failed to list images: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Pull an image
#[post("/images/pull", data = "<config>")]
async fn pull_image(
    state: &State<AppState>,
    config: Json<ImagePullConfig>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    let image_name = config.image.clone();
    
    match docker_manager.pull_image((*config).clone()).await {
        Ok(_) => {
            info!("Image pulled: {}", image_name);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Image pulled successfully: {}", config.image)),
            )))
        }
        Err(e) => {
            error!("Failed to pull image: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Remove an image
#[delete("/images/<id>?<force>")]
async fn remove_image(
    state: &State<AppState>,
    id: String,
    force: Option<bool>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.remove_image(&id, force.unwrap_or(false)).await {
        Ok(_) => {
            info!("Image removed: {}", id);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Image removed successfully: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to remove image: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Build an image
#[post("/images/build", data = "<config>")]
async fn build_image(
    state: &State<AppState>,
    config: Json<ImageBuildConfig>,
) -> Result<Json<ApiResponse<String>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.build_image(config.0).await {
        Ok(image_id) => {
            info!("Image built: {}", image_id);
            Ok(Json(ApiResponse::success(
                image_id.clone(),
                Some(format!("Image built successfully: {}", image_id)),
            )))
        }
        Err(e) => {
            error!("Failed to build image: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get image details
#[get("/images/<id>")]
async fn get_image(
    state: &State<AppState>,
    id: String,
) -> Result<Json<ApiResponse<ImageDetails>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.inspect_image(&id).await {
        Ok(image) => {
            Ok(Json(ApiResponse::success(
                image,
                Some(format!("Image details: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to get image details: {}", e);
            Err(Status::NotFound)
        }
    }
}

/// Configure image routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        list_images,
        pull_image,
        remove_image,
        build_image,
        get_image,
    ]
}
$$--GLUE--$$
.\src\api\metrics.rs
$$--GLUE--$$
use rocket::{get, routes, State};
use rocket::http::{ContentType, Status};
use rocket::response::content;
use rocket::response::content::Custom;
use std::sync::Arc;
use tracing::{error, info};

use crate::metrics::{MetricsCollector, export_prometheus_metrics};

/// App state with metrics collector
struct AppState {
    metrics_collector: Arc<MetricsCollector>,
}

/// Get Prometheus formatted metrics
#[get("/metrics")]
async fn get_prometheus_metrics(
    state: &State<AppState>,
) -> Result<Custom<String>, Status> {
    match export_prometheus_metrics(&state.metrics_collector).await {
        Ok(metrics) => {
            Ok(content::Custom(ContentType::Plain, metrics))
        }
        Err(e) => {
            error!("Failed to export Prometheus metrics: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get latest metrics snapshot as JSON
#[get("/metrics/json")]
async fn get_metrics_json(
    state: &State<AppState>,
) -> Result<rocket::serde::json::Json<crate::models::system::SystemMetrics>, Status> {
    match state.metrics_collector.get_latest().await {
        Some(snapshot) => {
            Ok(rocket::serde::json::Json(snapshot.metrics))
        }
        None => {
            // Try to collect metrics now
            match state.metrics_collector.collect_now().await {
                Ok(snapshot) => {
                    Ok(rocket::serde::json::Json(snapshot.metrics))
                }
                Err(e) => {
                    error!("Failed to collect metrics: {}", e);
                    Err(Status::InternalServerError)
                }
            }
        }
    }
}

/// Configure metrics routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        get_prometheus_metrics,
        get_metrics_json,
    ]
}
$$--GLUE--$$
.\src\api\mod.rs
$$--GLUE--$$
pub mod routes;
pub mod containers;
pub mod images;
pub mod volumes;
pub mod networks;
pub mod system;
pub mod agent;

// Re-export routes and common functions
pub use routes::configure_routes;
$$--GLUE--$$
.\src\api\networks.rs
$$--GLUE--$$
use rocket::{delete, get, post, routes, serde::json::Json, State};
use rocket::http::Status;
use std::sync::Arc;
use tokio::sync::Mutex;
use tracing::{error, info};

use crate::docker::DockerManager;
use crate::models::ApiResponse;
use crate::models::networks::{
    NetworkConfig, NetworkDetails, NetworksList, NetworkConnectRequest, NetworkDisconnectRequest,
};

/// App state with Docker manager
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
}

/// List all networks
#[get("/networks")]
async fn list_networks(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<NetworksList>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.list_networks().await {
        Ok(networks) => {
            // Convert Docker network models to our API models
            let network_details = networks
                .iter()
                .map(|n| NetworkDetails {
                    id: n.id.clone().unwrap_or_default(),
                    name: n.name.clone().unwrap_or_default(),
                    driver: n.driver.clone().unwrap_or_default(),
                    internal: n.internal.unwrap_or(false),
                    scope: n.scope.clone().unwrap_or_default(),
                    created: n.created.clone().unwrap_or_default(),
                    labels: n.labels.clone().unwrap_or_default(),
                })
                .collect::<Vec<_>>();
            
            let count = network_details.len();
            let response = NetworksList {
                networks: network_details,
                count,
            };
            
            Ok(Json(ApiResponse::success(
                response,
                Some(format!("Found {} networks", count)),
            )))
        }
        Err(e) => {
            error!("Failed to list networks: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Create a network
#[post("/networks", data = "<config>")]
async fn create_network(
    state: &State<AppState>,
    config: Json<NetworkConfig>,
) -> Result<Json<ApiResponse<String>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.create_network(config.0).await {
        Ok(id) => {
            info!("Network created: {}", id);
            Ok(Json(ApiResponse::success(
                id.clone(),
                Some(format!("Network created successfully: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to create network: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get network details
#[get("/networks/<id>")]
async fn get_network(
    state: &State<AppState>,
    id: String,
) -> Result<Json<ApiResponse<NetworkDetails>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.inspect_network(&id).await {
        Ok(network) => {
            let network_details = NetworkDetails {
                id: network.id.unwrap_or_default(),
                name: network.name.unwrap_or_default(),
                driver: network.driver.unwrap_or_default(),
                internal: network.internal.unwrap_or(false),
                scope: network.scope.unwrap_or_default(),
                created: network.created.unwrap_or_default(),
                labels: network.labels.unwrap_or_default(),
            };
            
            Ok(Json(ApiResponse::success(
                network_details,
                Some(format!("Network details: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to get network details: {}", e);
            Err(Status::NotFound)
        }
    }
}

/// Remove a network
#[delete("/networks/<id>")]
async fn remove_network(
    state: &State<AppState>,
    id: String,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.remove_network(&id).await {
        Ok(_) => {
            info!("Network removed: {}", id);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Network removed successfully: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to remove network: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Connect a container to a network
#[post("/networks/<id>/connect", data = "<request>")]
async fn connect_container(
    state: &State<AppState>,
    id: String,
    request: Json<NetworkConnectRequest>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager
        .connect_container_to_network(&id, &request.container_id)
        .await
    {
        Ok(_) => {
            info!(
                "Container {} connected to network {}",
                request.container_id, id
            );
            Ok(Json(ApiResponse::success(
                (),
                Some(format!(
                    "Container {} connected to network {} successfully",
                    request.container_id, id
                )),
            )))
        }
        Err(e) => {
            error!(
                "Failed to connect container {} to network {}: {}",
                request.container_id, id, e
            );
            Err(Status::InternalServerError)
        }
    }
}

/// Disconnect a container from a network
#[post("/networks/<id>/disconnect", data = "<request>")]
async fn disconnect_container(
    state: &State<AppState>,
    id: String,
    request: Json<NetworkDisconnectRequest>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager
        .disconnect_container_from_network(
            &id,
            &request.container_id,
            request.force.unwrap_or(false),
        )
        .await
    {
        Ok(_) => {
            info!(
                "Container {} disconnected from network {}",
                request.container_id, id
            );
            Ok(Json(ApiResponse::success(
                (),
                Some(format!(
                    "Container {} disconnected from network {} successfully",
                    request.container_id, id
                )),
            )))
        }
        Err(e) => {
            error!(
                "Failed to disconnect container {} from network {}: {}",
                request.container_id, id, e
            );
            Err(Status::InternalServerError)
        }
    }
}

/// Prune unused networks
#[post("/networks/prune")]
async fn prune_networks(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<u64>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.prune_networks().await {
        Ok(networks_deleted) => {
            info!("Networks pruned: {} networks deleted", networks_deleted);
            Ok(Json(ApiResponse::success(
                networks_deleted,
                Some(format!("Networks pruned: {} networks deleted", networks_deleted)),
            )))
        }
        Err(e) => {
            error!("Failed to prune networks: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Configure network routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        list_networks,
        create_network,
        get_network,
        remove_network,
        connect_container,
        disconnect_container,
        prune_networks,
    ]
}
$$--GLUE--$$
.\src\api\routes.rs
$$--GLUE--$$
use rocket::Route;

use crate::api::{
    agent, containers, images, networks, system, volumes,
};

/// Configure all API routes
pub fn configure_routes() -> Vec<Route> {
    let mut routes = Vec::new();
    
    // Add container routes
    routes.extend(containers::routes());
    
    // Add image routes
    routes.extend(images::routes());
    
    // Add volume routes
    routes.extend(volumes::routes());
    
    // Add network routes
    routes.extend(networks::routes());
    
    // Add system routes
    routes.extend(system::routes());
    
    // Add agent routes
    routes.extend(agent::routes());
    
    routes
}
$$--GLUE--$$
.\src\api\system.rs
$$--GLUE--$$
use rocket::{get, post, routes, serde::json::Json, State};
use rocket::http::Status;
use std::sync::Arc;
use std::time::{Duration, SystemTime, UNIX_EPOCH};
use tokio::sync::Mutex;
use tracing::{error, info};

use crate::docker::DockerManager;
use crate::models::ApiResponse;
use crate::models::system::{
    EventInfo, EventsResponse, SystemHealthResponse, SystemMetrics, SystemPruneRequest,
    SystemPruneResponse,
};

/// App state with Docker manager
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
    start_time: SystemTime,
}

/// Get system information
// #[get("/system/info")]
// async fn get_system_info(
//     state: &State<AppState>,
// ) -> Result<Json<ApiResponse<bollard::system::Info>>, Status> {
//     let docker_manager = state.docker_manager.lock().await;
    
//     match docker_manager.get_system_info().await {
//         Ok(info) => {
//             Ok(Json(ApiResponse::success(
//                 info,
//                 Some("System information retrieved successfully".to_string()),
//             )))
//         }
//         Err(e) => {
//             error!("Failed to get system information: {}", e);
//             Err(Status::InternalServerError)
//         }
//     }
// }

/// Get system health
#[get("/system/health")]
async fn get_system_health(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<SystemHealthResponse>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    // Get Docker daemon ping status
    let docker_ping = match docker_manager.ping().await {
        Ok(ping) => ping,
        Err(_) => false,
    };
    
    // Calculate agent uptime
    let uptime = state
        .start_time
        .elapsed()
        .unwrap_or(Duration::from_secs(0))
        .as_secs();
    
    let health = SystemHealthResponse {
        status: if docker_ping { "healthy".to_string() } else { "unhealthy".to_string() },
        docker_ping,
        agent_version: env!("CARGO_PKG_VERSION").to_string(),
        uptime_seconds: uptime,
    };
    
    Ok(Json(ApiResponse::success(
        health,
        Some("System health retrieved successfully".to_string()),
    )))
}

/// Get system metrics
#[get("/system/metrics")]
async fn get_system_metrics(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<SystemMetrics>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.get_system_metrics().await {
        Ok(metrics) => {
            Ok(Json(ApiResponse::success(
                metrics,
                Some("System metrics retrieved successfully".to_string()),
            )))
        }
        Err(e) => {
            error!("Failed to get system metrics: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get system events
#[get("/system/events?<timeout>")]
async fn get_system_events(
    state: &State<AppState>,
    timeout: Option<u64>,
) -> Result<Json<ApiResponse<EventsResponse>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager
        .get_system_events(timeout.unwrap_or(5))
        .await
    {
        Ok(events) => {
            // Convert Docker event models to our API models
            let event_infos = events
                .iter()
                .map(|e| EventInfo {
                    event_type: e.typ.unwrap().to_string(),
                    action: e.action.clone().unwrap_or_default(),
                    actor_id: e.actor.as_ref().and_then(|a| a.id.clone()).unwrap_or_default(),
                    actor_name: e
                        .actor
                        .as_ref()
                        .and_then(|a| a.attributes.as_ref())
                        .and_then(|attrs| attrs.get("name").cloned()),
                    time: e.time.unwrap_or(0) as u64,
                })
                .collect::<Vec<_>>();
            
            let response = EventsResponse {
                events: event_infos,
                count: event_infos.len(),
            };
            
            Ok(Json(ApiResponse::success(
                response,
                Some(format!("Retrieved {} system events", response.count)),
            )))
        }
        Err(e) => {
            error!("Failed to get system events: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Prune system resources
#[post("/system/prune", data = "<request>")]
async fn prune_system(
    state: &State<AppState>,
    request: Json<SystemPruneRequest>,
) -> Result<Json<ApiResponse<SystemPruneResponse>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager
        .prune_system(request.volumes.unwrap_or(false))
        .await
    {
        Ok(space_reclaimed) => {
            info!("System pruned, reclaimed {} bytes", space_reclaimed);
            
            let response = SystemPruneResponse {
                space_reclaimed,
            };
            
            Ok(Json(ApiResponse::success(
                response,
                Some(format!("System pruned, reclaimed {} bytes", space_reclaimed)),
            )))
        }
        Err(e) => {
            error!("Failed to prune system: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Configure system routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        get_system_info,
        get_system_health,
        get_system_metrics,
        get_system_events,
        prune_system,
    ]
}
$$--GLUE--$$
.\src\api\volumes.rs
$$--GLUE--$$
use rocket::{delete, get, post, routes, serde::json::Json, State};
use rocket::http::Status;
use std::sync::Arc;
use tokio::sync::Mutex;
use tracing::{error, info};

use crate::docker::DockerManager;
use crate::models::ApiResponse;
use crate::models::volumes::{VolumeConfig, VolumeDetails, VolumesList};

/// App state with Docker manager
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
}

/// List all volumes
#[get("/volumes")]
async fn list_volumes(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<VolumesList>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.list_volumes().await {
        Ok(volumes_response) => {
            // Convert Docker volume models to our API models
            let volume_details = if let Some(volumes) = volumes_response.volumes {
                volumes
                    .iter()
                    .map(|v| VolumeDetails {
                        name: v.name.clone(),
                        driver: v.driver.clone(),
                        mountpoint: v.mountpoint.clone().unwrap_or_default(),
                        scope: v.scope.clone().unwrap_or_default(),
                        labels: v.labels.clone().unwrap_or_default(),
                        created_at: v.created_at.clone().unwrap_or_default(),
                    })
                    .collect::<Vec<_>>()
            } else {
                Vec::new()
            };
            
            let response = VolumesList {
                volumes: volume_details,
                count: volume_details.len(),
            };
            
            Ok(Json(ApiResponse::success(
                response,
                Some(format!("Found {} volumes", response.count)),
            )))
        }
        Err(e) => {
            error!("Failed to list volumes: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Create a volume
#[post("/volumes", data = "<config>")]
async fn create_volume(
    state: &State<AppState>,
    config: Json<VolumeConfig>,
) -> Result<Json<ApiResponse<VolumeDetails>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.create_volume(config.0).await {
        Ok(volume) => {
            info!("Volume created: {}", volume.name);
            
            let volume_details = VolumeDetails {
                name: volume.name,
                driver: volume.driver,
                mountpoint: volume.mountpoint.unwrap_or_default(),
                scope: volume.scope.unwrap_or_default(),
                labels: volume.labels.unwrap_or_default(),
                created_at: volume.created_at.unwrap_or_default(),
            };
            
            Ok(Json(ApiResponse::success(
                volume_details,
                Some(format!("Volume created successfully: {}", volume_details.name)),
            )))
        }
        Err(e) => {
            error!("Failed to create volume: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get volume details
#[get("/volumes/<name>")]
async fn get_volume(
    state: &State<AppState>,
    name: String,
) -> Result<Json<ApiResponse<VolumeDetails>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.inspect_volume(&name).await {
        Ok(volume) => {
            let volume_details = VolumeDetails {
                name: volume.name,
                driver: volume.driver,
                mountpoint: volume.mountpoint.unwrap_or_default(),
                scope: volume.scope.unwrap_or_default(),
                labels: volume.labels.unwrap_or_default(),
                created_at: volume.created_at.unwrap_or_default(),
            };
            
            Ok(Json(ApiResponse::success(
                volume_details,
                Some(format!("Volume details: {}", name)),
            )))
        }
        Err(e) => {
            error!("Failed to get volume details: {}", e);
            Err(Status::NotFound)
        }
    }
}

/// Remove a volume
#[delete("/volumes/<name>?<force>")]
async fn remove_volume(
    state: &State<AppState>,
    name: String,
    force: Option<bool>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.remove_volume(&name, force.unwrap_or(false)).await {
        Ok(_) => {
            info!("Volume removed: {}", name);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Volume removed successfully: {}", name)),
            )))
        }
        Err(e) => {
            error!("Failed to remove volume: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Prune unused volumes
#[post("/volumes/prune")]
async fn prune_volumes(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<u64>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.prune_volumes().await {
        Ok(space_reclaimed) => {
            info!("Volumes pruned, reclaimed {} bytes", space_reclaimed);
            Ok(Json(ApiResponse::success(
                space_reclaimed,
                Some(format!("Volumes pruned, reclaimed {} bytes", space_reclaimed)),
            )))
        }
        Err(e) => {
            error!("Failed to prune volumes: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Configure volume routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        list_volumes,
        create_volume,
        get_volume,
        remove_volume,
        prune_volumes,
    ]
}
$$--GLUE--$$
.\src\auth\middleware.rs
$$--GLUE--$$
use rocket::{
    request::{FromRequest, Outcome},
    Request,
};
use rocket::http::Status;
use std::sync::Arc;
use tokio::sync::RwLock;
use tracing::{debug, error, warn};

use crate::error::{OmniAgentError, OmniAgentResult};

/// Authentication token
#[derive(Debug, Clone)]
pub struct AuthToken {
    pub token: String,
    pub is_valid: bool,
}

/// Token store for managing valid tokens
pub struct TokenStore {
    tokens: Arc<RwLock<Vec<String>>>,
}

impl TokenStore {
    /// Create a new token store
    pub fn new() -> Self {
        TokenStore {
            tokens: Arc::new(RwLock::new(Vec::new())),
        }
    }

    /// Add a token to the store
    pub async fn add_token(&self, token: String) {
        let mut tokens = self.tokens.write().await;
        tokens.push(token);
    }

    /// Remove a token from the store
    pub async fn remove_token(&self, token: &str) {
        let mut tokens = self.tokens.write().await;
        tokens.retain(|t| t != token);
    }

    /// Check if a token is valid
    pub async fn is_valid(&self, token: &str) -> bool {
        let tokens = self.tokens.read().await;
        tokens.contains(&token.to_string())
    }
}

/// Authentication guard for Rocket requests
pub struct AuthenticationGuard {
    pub token: String,
}

#[rocket::async_trait]
impl<'r> FromRequest<'r> for AuthenticationGuard {
    type Error = OmniAgentError;

    async fn from_request(request: &'r Request<'_>) -> Outcome<Self, Self::Error> {
        // Get token store from Rocket managed state
        let token_store = match request.rocket().state::<TokenStore>() {
            Some(store) => store,
            None => {
                error!("Token store not found in Rocket state");
                return Outcome::Failure((
                    Status::InternalServerError,
                    OmniAgentError::AuthenticationError("Authentication system not initialized".to_string()),
                ));
            }
        };

        // Extract the authorization header
        let auth_header = match request.headers().get_one("Authorization") {
            Some(header) => header,
            None => {
                warn!("No Authorization header found");
                return Outcome::Failure((
                    Status::Unauthorized,
                    OmniAgentError::AuthenticationError("No Authorization header provided".to_string()),
                ));
            }
        };

        // Parse the token from the header
        if !auth_header.starts_with("Bearer ") {
            warn!("Invalid Authorization header format: {}", auth_header);
            return Outcome::Failure((
                Status::Unauthorized,
                OmniAgentError::AuthenticationError("Invalid Authorization header format".to_string()),
            ));
        }

        let token = auth_header.trim_start_matches("Bearer ").trim().to_string();
        if token.is_empty() {
            warn!("Empty token provided");
            return Outcome::Failure((
                Status::Unauthorized,
                OmniAgentError::AuthenticationError("Empty token provided".to_string()),
            ));
        }

        // Validate the token
        match token_store.is_valid(&token).await {
            true => {
                debug!("Token authenticated successfully");
                Outcome::Success(AuthenticationGuard { token })
            }
            false => {
                warn!("Invalid token provided: {}", token);
                Outcome::Failure((
                    Status::Unauthorized,
                    OmniAgentError::AuthenticationError("Invalid token".to_string()),
                ))
            }
        }
    }
}

/// Initialize the authentication system
pub fn initialize_auth() -> TokenStore {
    // Create token store
    let token_store = TokenStore::new();
    
    // Initialize with a default token for development
    // In production, this should be replaced with a more secure mechanism
    tokio::spawn({
        let token_store = token_store.clone();
        async move {
            token_store.add_token("omni-agent-dev-token".to_string()).await;
        }
    });
    
    token_store
}

impl TokenStore {
    /// Clone the token store
    pub fn clone(&self) -> Self {
        TokenStore {
            tokens: self.tokens.clone(),
        }
    }
}

/// Helper function to validate a token
pub async fn validate_token(token_store: &TokenStore, token: &str) -> OmniAgentResult<()> {
    if token_store.is_valid(token).await {
        Ok(())
    } else {
        Err(OmniAgentError::AuthenticationError("Invalid token".to_string()))
    }
}
$$--GLUE--$$
.\src\auth\mod.rs
$$--GLUE--$$
pub mod middleware;

// Re-export commonly used items
pub use middleware::{AuthenticationGuard, AuthToken};
$$--GLUE--$$
.\src\docker\containers.rs
$$--GLUE--$$
use bollard::container::{
    Config, CreateContainerOptions, ListContainersOptions, LogsOptions, RemoveContainerOptions,
    StartContainerOptions, StopContainerOptions, RenameContainerOptions,
};
use bollard::exec::{CreateExecOptions, StartExecOptions};
use bollard::models::{ContainerSummary, HostConfig};
use futures::TryStreamExt;
use std::collections::HashMap;
use std::default::Default;
use tracing::{debug, error, info};

use crate::docker::DockerManager;
use crate::error::{OmniAgentError, OmniAgentResult};
use crate::models::containers::{ContainerConfig, ContainerDetails, ExecConfig};

impl DockerManager {
    /// List all containers
    pub async fn list_containers(&self, all: bool) -> OmniAgentResult<Vec<ContainerSummary>> {
        debug!("Listing containers, show all: {}", all);
        let options = ListContainersOptions {
            all: all,
            ..Default::default()
        };

        match self.client().list_containers(Some(options)).await {
            Ok(containers) => {
                info!("Found {} containers", containers.len());
                Ok(containers)
            }
            Err(e) => {
                error!("Failed to list containers: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Create a new container
    pub async fn create_container(
        &self,
        config: ContainerConfig,
    ) -> OmniAgentResult<ContainerDetails> {
        debug!("Creating container with name: {:?}", config.name);

        // Map our configuration to Docker's configuration
        let mut env = Vec::new();
        for (key, value) in config.environment.iter() {
            env.push(format!("{}={}", key, value));
        }

        // Create labels
        let mut labels = HashMap::new();
        labels.insert(
            "com.omniagent.managed".to_string(),
            "true".to_string(),
        );
        if let Some(app_labels) = config.labels {
            for (key, value) in app_labels {
                labels.insert(key, value);
            }
        }

        // Build the host config
        let host_config = HostConfig {
            auto_remove: Some(config.auto_remove.unwrap_or(false)),
            restart_policy: config.restart_policy.map(|policy| {
                serde_json::from_value(serde_json::json!({
                    "Name": policy
                }))
                .unwrap_or_default()
            }),
            ..Default::default()
        };

        // Build the container config
        let container_config = Config {
            image: Some(config.image),
            cmd: config.command,
            env: Some(env),
            labels: Some(labels),
            host_config: Some(host_config),
            ..Default::default()
        };

        // Create options
        let options = CreateContainerOptions {
            name: config.name,
            ..Default::default()
        };

        // Create the container
        match self.client().create_container(Some(options), container_config).await {
            Ok(response) => {
                info!("Container created with ID: {}", response.id);
                
                // Start the container if requested
                if config.start.unwrap_or(true) {
                    match self.start_container(&response.id).await {
                        Ok(_) => info!("Container started: {}", response.id),
                        Err(e) => {
                            error!("Failed to start container {}: {}", response.id, e);
                            return Err(e);
                        }
                    }
                }
                
                // Get full container details
                match self.inspect_container(&response.id).await {
                    Ok(details) => Ok(details),
                    Err(e) => {
                        error!("Failed to get details for container {}: {}", response.id, e);
                        Err(e)
                    }
                }
            }
            Err(e) => {
                error!("Failed to create container: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Inspect a container
    pub async fn inspect_container(&self, id: &str) -> OmniAgentResult<ContainerDetails> {
        debug!("Inspecting container: {}", id);
        
        match self.client().inspect_container(id, None).await {
            Ok(details) => {
                // Map Docker's response to our model
                let container_details = ContainerDetails {
                    id: details.id.unwrap_or_else(|| id.to_string()),
                    name: details.name.unwrap_or_default().trim_start_matches('/').to_string(),
                    image: details.config.as_ref().and_then(|c| c.image.clone()).unwrap_or_default(),
                    status: details.state.and_then(|s| s.status).unwrap_or_default(),
                    created: details.created.unwrap_or_default(),
                    ports: Vec::new(), // Would need to map port bindings from host_config
                    labels: details.config.and_then(|c| c.labels).unwrap_or_default(),
                };
                
                Ok(container_details)
            }
            Err(e) => {
                error!("Failed to inspect container {}: {}", id, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Start a container
    pub async fn start_container(&self, id: &str) -> OmniAgentResult<()> {
        debug!("Starting container: {}", id);
        
        let options = StartContainerOptions::<String>::default();
        match self.client().start_container(id, Some(options)).await {
            Ok(_) => {
                info!("Container started: {}", id);
                Ok(())
            }
            Err(e) => {
                error!("Failed to start container {}: {}", id, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Stop a container
    pub async fn stop_container(&self, id: &str, timeout: Option<i64>) -> OmniAgentResult<()> {
        debug!("Stopping container: {}", id);
        
        let options = StopContainerOptions {
            t: timeout,
        };
        
        match self.client().stop_container(id, Some(options)).await {
            Ok(_) => {
                info!("Container stopped: {}", id);
                Ok(())
            }
            Err(e) => {
                error!("Failed to stop container {}: {}", id, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Restart a container
    pub async fn restart_container(&self, id: &str, timeout: Option<i64>) -> OmniAgentResult<()> {
        debug!("Restarting container: {}", id);
        
        match self.client().restart_container(id, timeout).await {
            Ok(_) => {
                info!("Container restarted: {}", id);
                Ok(())
            }
            Err(e) => {
                error!("Failed to restart container {}: {}", id, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Remove a container
    pub async fn remove_container(&self, id: &str, force: bool, remove_volumes: bool) -> OmniAgentResult<()> {
        debug!(
            "Removing container: {} (force: {}, remove volumes: {})",
            id, force, remove_volumes
        );
        
        let options = RemoveContainerOptions {
            force,
            v: remove_volumes,
            ..Default::default()
        };
        
        match self.client().remove_container(id, Some(options)).await {
            Ok(_) => {
                info!("Container removed: {}", id);
                Ok(())
            }
            Err(e) => {
                error!("Failed to remove container {}: {}", id, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Rename a container
    pub async fn rename_container(&self, id: &str, new_name: &str) -> OmniAgentResult<()> {
        debug!("Renaming container {} to {}", id, new_name);
        
        let options = RenameContainerOptions {
            name: new_name,
        };
        
        match self.client().rename_container(id, options).await {
            Ok(_) => {
                info!("Container {} renamed to {}", id, new_name);
                Ok(())
            }
            Err(e) => {
                error!("Failed to rename container {} to {}: {}", id, new_name, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Get container logs
    pub async fn get_container_logs(&self, id: &str, tail: Option<i64>) -> OmniAgentResult<String> {
        debug!("Getting logs for container: {}", id);
        
        let options = LogsOptions {
            stdout: true,
            stderr: true,
            tail: tail.map(|t| t.to_string()),
            ..Default::default()
        };
        
        match self.client().logs(id, Some(options)) {
            Ok(logs) => {
                let logs_stream = logs.try_collect::<Vec<_>>().await?;
                let logs_text = logs_stream
                    .iter()
                    .map(|log| log.to_string())
                    .collect::<Vec<_>>()
                    .join("");
                
                Ok(logs_text)
            }
            Err(e) => {
                error!("Failed to get logs for container {}: {}", id, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Execute a command in a container
    pub async fn exec_in_container(&self, id: &str, config: ExecConfig) -> OmniAgentResult<String> {
        debug!("Executing command in container {}: {:?}", id, config.cmd);
        
        // Create exec instance
        let exec_options = CreateExecOptions {
            cmd: Some(config.cmd),
            attach_stdout: Some(true),
            attach_stderr: Some(true),
            ..Default::default()
        };
        
        let exec_create = match self.client().create_exec(id, exec_options).await {
            Ok(exec) => exec,
            Err(e) => {
                error!("Failed to create exec instance in container {}: {}", id, e);
                return Err(OmniAgentError::DockerError(e));
            }
        };
        
        // Start exec instance
        let exec_id = exec_create.id;
        let start_options = StartExecOptions {
            detach: false,
            ..Default::default()
        };
        
        match self.client().start_exec(&exec_id, Some(start_options)).await {
            Ok(output) => {
                match output {
                    bollard::exec::StartExecResults::Attached { output, .. } => {
                        let output_text = output
                            .try_collect::<Vec<_>>()
                            .await?
                            .iter()
                            .map(|log| log.to_string())
                            .collect::<Vec<_>>()
                            .join("");
                        
                        Ok(output_text)
                    }
                    bollard::exec::StartExecResults::Detached => {
                        Ok("Command started in detached mode".to_string())
                    }
                }
            }
            Err(e) => {
                error!("Failed to start exec instance {}: {}", exec_id, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }
}
$$--GLUE--$$
.\src\docker\images.rs
$$--GLUE--$$
use bollard::image::{
    BuildImageOptions, CreateImageOptions, ListImagesOptions, RemoveImageOptions,
};
use bollard::models::ImageSummary;
use futures::TryStreamExt;
use std::collections::HashMap;
use std::default::Default;
use std::path::Path;
use tracing::{debug, error, info};

use crate::docker::DockerManager;
use crate::error::{OmniAgentError, OmniAgentResult};
use crate::models::images::{ImageBuildConfig, ImageDetails, ImagePullConfig};

impl DockerManager {
    /// List all images
    pub async fn list_images(&self, all: bool) -> OmniAgentResult<Vec<ImageSummary>> {
        debug!("Listing images, show all: {}", all);
        let options = ListImagesOptions {
            all: all,
            ..Default::default()
        };

        match self.client().list_images(Some(options)).await {
            Ok(images) => {
                info!("Found {} images", images.len());
                Ok(images)
            }
            Err(e) => {
                error!("Failed to list images: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Pull an image
    pub async fn pull_image(&self, config: ImagePullConfig) -> OmniAgentResult<()> {
        debug!("Pulling image: {}", config.image);

        // Parse image name and tag
        let (image_name, image_tag) = match config.image.split_once(':') {
            Some((name, tag)) => (name, tag),
            None => (config.image.as_str(), "latest"),
        };

        let options = CreateImageOptions {
            from_image: image_name,
            tag: image_tag,
            ..Default::default()
        };

        // Pull the image
        match self.client().create_image(Some(options), None, None) {
            Ok(pull_stream) => {
                // Process the pull progress
                let mut progress = pull_stream.try_collect::<Vec<_>>().await?;
                
                // Check for errors in the last progress message
                if let Some(last) = progress.last() {
                    if let Some(error) = &last.error {
                        error!("Error pulling image '{}': {}", config.image, error);
                        return Err(OmniAgentError::DockerError(
                            bollard::errors::Error::IOError {
                                err: std::io::Error::new(std::io::ErrorKind::Other, error.clone()),
                            },
                        ));
                    }
                }
                
                info!("Image pulled successfully: {}", config.image);
                Ok(())
            }
            Err(e) => {
                error!("Failed to pull image '{}': {}", config.image, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Remove an image
    pub async fn remove_image(&self, id: &str, force: bool) -> OmniAgentResult<()> {
        debug!("Removing image: {} (force: {})", id, force);
        
        let options = RemoveImageOptions {
            force,
            ..Default::default()
        };
        
        match self.client().remove_image(id, Some(options), None).await {
            Ok(_) => {
                info!("Image removed: {}", id);
                Ok(())
            }
            Err(e) => {
                error!("Failed to remove image {}: {}", id, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Build an image from a Dockerfile
    pub async fn build_image(&self, config: ImageBuildConfig) -> OmniAgentResult<String> {
        debug!("Building image from context: {}", config.context_path);
        
        // Validate that the context path exists
        let context_path = Path::new(&config.context_path);
        if !context_path.exists() || !context_path.is_dir() {
            error!("Build context does not exist or is not a directory: {}", config.context_path);
            return Err(OmniAgentError::InvalidParameter(format!(
                "Build context does not exist or is not a directory: {}",
                config.context_path
            )));
        }
        
        // Read the context directory and prepare the build context
        let tar_context = tokio::task::spawn_blocking(move || {
            let mut tar = tar::Builder::new(Vec::new());
            let base_path = Path::new(&config.context_path);
            
            fn add_dir_to_tar(
                tar: &mut tar::Builder<Vec<u8>>,
                base_path: &Path,
                dir_path: &Path,
            ) -> std::io::Result<()> {
                for entry in std::fs::read_dir(dir_path)? {
                    let entry = entry?;
                    let path = entry.path();
                    let rel_path = path.strip_prefix(base_path).unwrap();
                    
                    if path.is_dir() {
                        add_dir_to_tar(tar, base_path, &path)?;
                    } else {
                        let mut file = std::fs::File::open(&path)?;
                        tar.append_file(rel_path, &mut file)?;
                    }
                }
                Ok(())
            }
            
            match add_dir_to_tar(&mut tar, base_path, base_path) {
                Ok(_) => {
                    let tar_data = tar.into_inner().map_err(|e| {
                        std::io::Error::new(std::io::ErrorKind::Other, e.to_string())
                    })?;
                    Ok(tar_data)
                }
                Err(e) => Err(e),
            }
        })
        .await
        .map_err(|e| OmniAgentError::Unknown(e.to_string()))??;
        
        // Prepare build options
        let mut build_args = HashMap::new();
        if let Some(args) = config.build_args {
            build_args = args;
        }
        
        let options = BuildImageOptions {
            dockerfile: config.dockerfile.unwrap_or_else(|| "Dockerfile".to_string()),
            t: config.tag,
            rm: Some(true),
            buildargs: Some(build_args),
            ..Default::default()
        };
        
        // Build the image
        match self.client().build_image(options, None, Some(tar_context.into())) {
            Ok(build_stream) => {
                // Process the build progress
                let build_results = build_stream.try_collect::<Vec<_>>().await?;
                
                // Check for errors in the build output
                for output in &build_results {
                    if let Some(error) = &output.error {
                        error!("Error building image: {}", error);
                        return Err(OmniAgentError::DockerError(
                            bollard::errors::Error::IOError {
                                err: std::io::Error::new(std::io::ErrorKind::Other, error.clone()),
                            },
                        ));
                    }
                }
                
                // Extract the image ID from the output
                let image_id = build_results
                    .iter()
                    .filter_map(|output| output.aux.as_ref().and_then(|aux| aux.id.clone()))
                    .last()
                    .unwrap_or_else(|| "unknown".to_string());
                
                info!("Image built successfully: {}", image_id);
                Ok(image_id)
            }
            Err(e) => {
                error!("Failed to build image: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Inspect an image
    pub async fn inspect_image(&self, id: &str) -> OmniAgentResult<ImageDetails> {
        debug!("Inspecting image: {}", id);
        
        match self.client().inspect_image(id).await {
            Ok(details) => {
                // Map Docker's response to our model
                let tags = details.repo_tags.unwrap_or_default();
                let tag = if !tags.is_empty() { 
                    Some(tags[0].clone()) 
                } else { 
                    None 
                };
                
                let image_details = ImageDetails {
                    id: details.id.unwrap_or_else(|| id.to_string()),
                    tags,
                    created: details.created.unwrap_or_default(),
                    size: details.size.unwrap_or(0),
                    virtual_size: details.virtual_size.unwrap_or(0),
                    labels: details.config.and_then(|c| c.labels).unwrap_or_default(),
                };
                
                Ok(image_details)
            }
            Err(e) => {
                error!("Failed to inspect image {}: {}", id, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }
}
$$--GLUE--$$
.\src\docker\manager.rs
$$--GLUE--$$
use bollard::Docker;
use bollard::system::Version;
use std::process::Command;
use std::sync::Arc;
use tracing::{debug, error, info, warn};
use which::which;

use crate::error::{OmniAgentError, OmniAgentResult};

/// Docker client manager
pub struct DockerManager {
    client: Docker,
}

impl DockerManager {
    /// Create a new Docker manager
    pub async fn new() -> OmniAgentResult<Self> {
        // Check if Docker is installed
        if which("docker").is_err() {
            error!("Docker is not installed on this system");
            return Err(OmniAgentError::DockerNotInstalled);
        }

        // Attempt to connect to Docker
        let client = match Docker::connect_with_local_defaults() {
            Ok(client) => {
                // Check if we can communicate with Docker
                match client.version().await {
                    Ok(version) => {
                        info!(
                            "Connected to Docker {} (API v{})",
                            version.version.unwrap_or_default(),
                            version.api_version.unwrap_or_default()
                        );
                        client
                    }
                    Err(e) => {
                        error!("Docker is installed but not running: {}", e);
                        return Err(OmniAgentError::DockerNotRunning);
                    }
                }
            }
            Err(e) => {
                error!("Failed to connect to Docker: {}", e);
                return Err(OmniAgentError::DockerError(e));
            }
        };

        Ok(DockerManager { client })
    }

    /// Initialize Docker if not already running
    pub async fn initialize() -> OmniAgentResult<Self> {
        info!("Checking for Docker installation");
        let docker_installed = which("docker").is_ok();

        if !docker_installed {
            #[cfg(target_os = "linux")]
            {
                info!("Attempting to install Docker on Linux");
                // This is a simplified example. In a real application,
                // you would want more robust installation logic.
                let output = Command::new("sh")
                    .arg("-c")
                    .arg("curl -fsSL https://get.docker.com | sh")
                    .output()?;

                if !output.status.success() {
                    let error = String::from_utf8_lossy(&output.stderr);
                    error!("Failed to install Docker: {}", error);
                    return Err(OmniAgentError::DockerInitFailed(format!(
                        "Installation failed: {}",
                        error
                    )));
                }
                info!("Docker installed successfully");
            }

            #[cfg(target_os = "macos")]
            {
                error!("Docker needs to be installed manually on macOS");
                info!("Please download Docker Desktop from https://www.docker.com/products/docker-desktop");
                return Err(OmniAgentError::DockerInitFailed(
                    "Please install Docker Desktop for Mac manually".to_string(),
                ));
            }

            #[cfg(target_os = "windows")]
            {
                error!("Docker needs to be installed manually on Windows");
                info!("Please download Docker Desktop from https://www.docker.com/products/docker-desktop");
                return Err(OmniAgentError::DockerInitFailed(
                    "Please install Docker Desktop for Windows manually".to_string(),
                ));
            }
        }

        // Start Docker service if not running
        info!("Attempting to start Docker service");
        Self::start_docker_service()?;

        // Try to connect again
        Self::new().await
    }

    /// Start the Docker service based on the platform
    fn start_docker_service() -> OmniAgentResult<()> {
        #[cfg(target_os = "linux")]
        {
            info!("Starting Docker service on Linux");
            let output = Command::new("sh")
                .arg("-c")
                .arg("sudo systemctl start docker")
                .output()?;

            if !output.status.success() {
                let error = String::from_utf8_lossy(&output.stderr);
                warn!("Failed to start Docker service: {}", error);
                return Err(OmniAgentError::DockerInitFailed(format!(
                    "Service start failed: {}",
                    error
                )));
            }
        }

        #[cfg(target_os = "macos")]
        {
            info!("Starting Docker service on macOS");
            let output = Command::new("open")
                .arg("-a")
                .arg("Docker")
                .output()?;

            if !output.status.success() {
                let error = String::from_utf8_lossy(&output.stderr);
                warn!("Failed to start Docker service: {}", error);
                return Err(OmniAgentError::DockerInitFailed(format!(
                    "Service start failed: {}",
                    error
                )));
            }
        }

        #[cfg(target_os = "windows")]
        {
            info!("Starting Docker service on Windows");
            let output = Command::new("cmd")
                .arg("/C")
                .arg("start")
                .arg("")
                .arg("\"Docker Desktop\"")
                .output()?;

            if !output.status.success() {
                let error = String::from_utf8_lossy(&output.stderr);
                warn!("Failed to start Docker service: {}", error);
                return Err(OmniAgentError::DockerInitFailed(format!(
                    "Service start failed: {}",
                    error
                )));
            }
        }

        // Give Docker some time to start
        std::thread::sleep(std::time::Duration::from_secs(5));
        Ok(())
    }

    /// Get Docker version information
    pub async fn get_version(&self) -> OmniAgentResult<Version> {
        debug!("Getting Docker version");
        match self.client.version().await {
            Ok(version) => {
                info!("Docker version: {:?}", version);
                Ok(version)
            }
            Err(e) => {
                error!("Failed to get Docker version: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Get the Docker client instance
    pub fn client(&self) -> &Docker {
        &self.client
    }
}
$$--GLUE--$$
.\src\docker\mod.rs
$$--GLUE--$$
mod manager;
pub mod containers;
pub mod images;
pub mod volumes;
pub mod networks;
pub mod system;

// Re-export the DockerManager
pub use manager::DockerManager;
$$--GLUE--$$
.\src\docker\networks.rs
$$--GLUE--$$
use bollard::network::{
    ConnectNetworkOptions, CreateNetworkOptions, DisconnectNetworkOptions, ListNetworksOptions,
    RemoveNetworkOptions,
};
use bollard::models::Network;
use std::collections::HashMap;
use std::default::Default;
use tracing::{debug, error, info};

use crate::docker::DockerManager;
use crate::error::{OmniAgentError, OmniAgentResult};
use crate::models::networks::NetworkConfig;

impl DockerManager {
    /// List all networks
    pub async fn list_networks(&self) -> OmniAgentResult<Vec<Network>> {
        debug!("Listing networks");
        let options = ListNetworksOptions::<String>::default();

        match self.client().list_networks(Some(options)).await {
            Ok(networks) => {
                info!("Found {} networks", networks.len());
                Ok(networks)
            }
            Err(e) => {
                error!("Failed to list networks: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Create a network
    pub async fn create_network(&self, config: NetworkConfig) -> OmniAgentResult<String> {
        debug!("Creating network with name: {}", config.name);

        // Create labels
        let mut labels = HashMap::new();
        labels.insert(
            "com.omniagent.managed".to_string(),
            "true".to_string(),
        );
        if let Some(network_labels) = config.labels {
            for (key, value) in network_labels {
                labels.insert(key, value);
            }
        }

        // Build options
        let options = CreateNetworkOptions {
            name: config.name.clone(),
            driver: config.driver.unwrap_or_else(|| "bridge".to_string()),
            internal: config.internal,
            labels,
            options: config.options.unwrap_or_default(),
            ..Default::default()
        };

        // Create the network
        match self.client().create_network(options).await {
            Ok(response) => {
                let id = response.id.unwrap_or_else(|| "unknown".to_string());
                info!("Network created: {} ({})", config.name, id);
                Ok(id)
            }
            Err(e) => {
                error!("Failed to create network: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Inspect a network
    pub async fn inspect_network(&self, id: &str) -> OmniAgentResult<Network> {
        debug!("Inspecting network: {}", id);
        
        match self.client().inspect_network(id, None).await {
            Ok(network) => {
                info!("Network inspected: {}", id);
                Ok(network)
            }
            Err(e) => {
                error!("Failed to inspect network {}: {}", id, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Remove a network
    pub async fn remove_network(&self, id: &str) -> OmniAgentResult<()> {
        debug!("Removing network: {}", id);
        
        let options = RemoveNetworkOptions {};
        
        match self.client().remove_network(id).await {
            Ok(_) => {
                info!("Network removed: {}", id);
                Ok(())
            }
            Err(e) => {
                error!("Failed to remove network {}: {}", id, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Connect a container to a network
    pub async fn connect_container_to_network(
        &self,
        network_id: &str,
        container_id: &str,
    ) -> OmniAgentResult<()> {
        debug!(
            "Connecting container {} to network {}",
            container_id, network_id
        );
        
        let options = ConnectNetworkOptions {
            container: container_id,
            ..Default::default()
        };
        
        match self.client().connect_network(network_id, options).await {
            Ok(_) => {
                info!(
                    "Container {} connected to network {}",
                    container_id, network_id
                );
                Ok(())
            }
            Err(e) => {
                error!(
                    "Failed to connect container {} to network {}: {}",
                    container_id, network_id, e
                );
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Disconnect a container from a network
    pub async fn disconnect_container_from_network(
        &self,
        network_id: &str,
        container_id: &str,
        force: bool,
    ) -> OmniAgentResult<()> {
        debug!(
            "Disconnecting container {} from network {} (force: {})",
            container_id, network_id, force
        );
        
        let options = DisconnectNetworkOptions {
            container: container_id,
            force,
        };
        
        match self.client().disconnect_network(network_id, options).await {
            Ok(_) => {
                info!(
                    "Container {} disconnected from network {}",
                    container_id, network_id
                );
                Ok(())
            }
            Err(e) => {
                error!(
                    "Failed to disconnect container {} from network {}: {}",
                    container_id, network_id, e
                );
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Prune unused networks
    pub async fn prune_networks(&self) -> OmniAgentResult<u64> {
        debug!("Pruning unused networks");
        
        match self.client().prune_networks(None).await {
            Ok(response) => {
                let networks_deleted = response.networks_deleted.unwrap_or_default().len() as u64;
                
                info!("Pruned {} networks", networks_deleted);
                Ok(networks_deleted)
            }
            Err(e) => {
                error!("Failed to prune networks: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }
}
$$--GLUE--$$
.\src\docker\system.rs
$$--GLUE--$$
use bollard::system::{EventsOptions, Info, SystemPruneOptions};
use futures::StreamExt;
use std::default::Default;
use std::time::Duration;
use tokio::time::timeout;
use tracing::{debug, error, info, warn};

use crate::docker::DockerManager;
use crate::error::{OmniAgentError, OmniAgentResult};
use crate::models::system::SystemMetrics;

impl DockerManager {
    /// Get system information
    pub async fn get_system_info(&self) -> OmniAgentResult<Info> {
        debug!("Getting system information");
        match self.client().info().await {
            Ok(info) => {
                info!("System information retrieved successfully");
                Ok(info)
            }
            Err(e) => {
                error!("Failed to get system information: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Get system events with a timeout
    pub async fn get_system_events(
        &self,
        timeout_secs: u64,
    ) -> OmniAgentResult<Vec<bollard::models::EventMessage>> {
        debug!("Getting system events with timeout: {} seconds", timeout_secs);
        
        let options = EventsOptions::<String>::default();
        let events_stream = self.client().events(Some(options));
        let events_timeout = timeout(
            Duration::from_secs(timeout_secs),
            events_stream.collect::<Vec<_>>(),
        );
        
        match events_timeout.await {
            Ok(events_result) => {
                let events = events_result
                    .into_iter()
                    .filter_map(Result::ok)
                    .collect::<Vec<_>>();
                
                info!("Retrieved {} system events", events.len());
                Ok(events)
            }
            Err(_) => {
                warn!("Timeout occurred while collecting system events");
                Ok(Vec::new())
            }
        }
    }

    /// Ping the Docker daemon
    pub async fn ping(&self) -> OmniAgentResult<bool> {
        debug!("Pinging Docker daemon");
        match self.client().ping().await {
            Ok(_) => {
                info!("Docker daemon is responsive");
                Ok(true)
            }
            Err(e) => {
                error!("Docker daemon ping failed: {}", e);
                Ok(false)
            }
        }
    }

    /// Get system metrics
    pub async fn get_system_metrics(&self) -> OmniAgentResult<SystemMetrics> {
        debug!("Getting system metrics");
        
        // Get Docker system info
        let info = self.get_system_info().await?;
        
        // Extract metrics from the system info
        let metrics = SystemMetrics {
            containers_running: info.containers_running.unwrap_or(0),
            containers_total: info.containers.unwrap_or(0),
            containers_paused: info.containers_paused.unwrap_or(0),
            containers_stopped: info.containers_stopped.unwrap_or(0),
            images: info.images.unwrap_or(0),
            memory_total: info.mem_total.unwrap_or(0),
            cpu_count: info.n_cpu.unwrap_or(0),
            docker_version: info.server_version.unwrap_or_default(),
            os_type: info.operating_system.unwrap_or_default(),
            architecture: info.architecture.unwrap_or_default(),
            kernel_version: info.kernel_version.unwrap_or_default(),
        };
        
        Ok(metrics)
    }

    /// Prune unused Docker resources (containers, networks, volumes, and images)
    pub async fn prune_system(&self, prune_volumes: bool) -> OmniAgentResult<u64> {
        debug!("Pruning system resources (prune volumes: {})", prune_volumes);
        
        let options = SystemPruneOptions {
            all: true,
            volumes: prune_volumes,
        };
        
        match self.client().prune_systems(Some(options)).await {
            Ok(response) => {
                let space_reclaimed = response.space_reclaimed.unwrap_or(0);
                
                info!("System pruned, reclaimed {} bytes", space_reclaimed);
                Ok(space_reclaimed)
            }
            Err(e) => {
                error!("Failed to prune system: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }
}
$$--GLUE--$$
.\src\docker\volumes.rs
$$--GLUE--$$
use bollard::volume::{CreateVolumeOptions, ListVolumesOptions, RemoveVolumeOptions};
use bollard::models::VolumeListResponse;
use bollard::service::Volume;
use std::collections::HashMap;
use std::default::Default;
use tracing::{debug, error, info};

use crate::docker::DockerManager;
use crate::error::{OmniAgentError, OmniAgentResult};
use crate::models::volumes::VolumeConfig;

impl DockerManager {
    /// List all volumes
    pub async fn list_volumes(&self) -> OmniAgentResult<VolumeListResponse> {
        debug!("Listing volumes");
        let options = ListVolumesOptions::<String>::default();

        match self.client().list_volumes(Some(options)).await {
            Ok(volumes) => {
                info!("Found {} volumes", volumes.volumes.as_ref().map_or(0, |v| v.len()));
                Ok(volumes)
            }
            Err(e) => {
                error!("Failed to list volumes: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Create a volume
    pub async fn create_volume(&self, config: VolumeConfig) -> OmniAgentResult<Volume> {
        debug!("Creating volume with name: {:?}", config.name);

        // Create labels
        let mut labels = HashMap::new();
        labels.insert(
            "com.omniagent.managed".to_string(),
            "true".to_string(),
        );
        if let Some(volume_labels) = config.labels {
            for (key, value) in volume_labels {
                labels.insert(key, value);
            }
        }

        // Build options
        let options = CreateVolumeOptions {
            name: Some(config.name.clone()),
            driver: config.driver,
            driver_opts: config.driver_opts,
            labels: Some(labels),
            ..Default::default()
        };

        // Create the volume
        match self.client().create_volume(options).await {
            Ok(volume) => {
                info!("Volume created: {}", volume.name);
                Ok(volume)
            }
            Err(e) => {
                error!("Failed to create volume: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Inspect a volume
    pub async fn inspect_volume(&self, name: &str) -> OmniAgentResult<Volume> {
        debug!("Inspecting volume: {}", name);
        
        match self.client().inspect_volume(name).await {
            Ok(volume) => {
                info!("Volume inspected: {}", name);
                Ok(volume)
            }
            Err(e) => {
                error!("Failed to inspect volume {}: {}", name, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Remove a volume
    pub async fn remove_volume(&self, name: &str, force: bool) -> OmniAgentResult<()> {
        debug!("Removing volume: {} (force: {})", name, force);
        
        let options = RemoveVolumeOptions {
            force: Some(force),
        };
        
        match self.client().remove_volume(name, Some(options)).await {
            Ok(_) => {
                info!("Volume removed: {}", name);
                Ok(())
            }
            Err(e) => {
                error!("Failed to remove volume {}: {}", name, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Prune unused volumes
    pub async fn prune_volumes(&self) -> OmniAgentResult<u64> {
        debug!("Pruning unused volumes");
        
        match self.client().prune_volumes(None).await {
            Ok(response) => {
                let space_reclaimed = response.space_reclaimed.unwrap_or(0);
                let volumes_deleted = response.volumes_deleted.unwrap_or_default().len() as u64;
                
                info!("Pruned {} volumes, reclaimed {} bytes", volumes_deleted, space_reclaimed);
                Ok(space_reclaimed as u64)
            }
            Err(e) => {
                error!("Failed to prune volumes: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }
}
$$--GLUE--$$
.\src\error.rs
$$--GLUE--$$
use std::io;
use thiserror::Error;

#[derive(Error, Debug)]
pub enum OmniAgentError {
    #[error("Docker error: {0}")]
    DockerError(#[from] bollard::errors::Error),
    
    #[error("IO error: {0}")]
    IoError(#[from] io::Error),
    
    #[error("Docker not installed")]
    DockerNotInstalled,
    
    #[error("Docker not running")]
    DockerNotRunning,
    
    #[error("Docker initialization failed: {0}")]
    DockerInitFailed(String),
    
    #[error("Docker command execution failed: {0}")]
    CommandExecutionFailed(String),
    
    #[error("Platform not supported: {0}")]
    PlatformNotSupported(String),
    
    #[error("HTTP request error: {0}")]
    RequestError(#[from] reqwest::Error),
    
    #[error("Serialization error: {0}")]
    SerializationError(#[from] serde_json::Error),
    
    #[error("Rocket server error")]
    RocketError,
    
    #[error("Resource not found: {0}")]
    NotFound(String),
    
    #[error("Invalid parameter: {0}")]
    InvalidParameter(String),
    
    #[error("Authentication error: {0}")]
    AuthenticationError(String),
    
    #[error("Authorization error: {0}")]
    AuthorizationError(String),
    
    #[error("Resource conflict: {0}")]
    ResourceConflict(String),
    
    #[error("Resource limit exceeded: {0}")]
    ResourceLimitExceeded(String),
    
    #[error("Operation timeout: {0}")]
    OperationTimeout(String),
    
    #[error("Director communication error: {0}")]
    DirectorCommunicationError(String),
    
    #[error("Unknown error: {0}")]
    Unknown(String),
}

pub type OmniAgentResult<T> = Result<T, OmniAgentError>;
$$--GLUE--$$
.\src\lib.rs
$$--GLUE--$$
pub mod error;
pub mod docker;
pub mod api;
pub mod auth;
pub mod metrics;
pub mod models;

// Re-export commonly used items
pub use error::{OmniAgentError, OmniAgentResult};
$$--GLUE--$$
.\src\main.rs
$$--GLUE--$$
use omniagent::api::configure_routes;
use omniagent::api::metrics;
use omniagent::auth::middleware::TokenStore;
use omniagent::auth::middleware::initialize_auth;
use omniagent::docker::DockerManager;
use omniagent::error::OmniAgentResult;
use omniagent::metrics::{MetricsCollector, SystemMetricsSnapshot};
use omniagent::models::agent::AgentInfo;
use omniagent::api::agent::initialize_agent_info;
use omniagent::api::agent::start_heartbeat_task;
use std::net::IpAddr;
use std::net::Ipv4Addr;
use std::sync::Arc;
use std::time::SystemTime;
use tokio::sync::{Mutex, RwLock};
use tracing::{error, info};
use console::{style, Term};

const BANNER: &str = r#"
   ____  __  __ _   _ _____             _____ ______ _   _ _______ 
  / __ \|  \/  | \ | |_   _|      /\   / ____|  ____| \ | |__   __|
 | |  | | \  / |  \| | | |       /  \ | |  __| |__  |  \| |  | |   
 | |  | | |\/| | . ` | | |      / /\ \| | |_ |  __| | . ` |  | |   
 | |__| | |  | | |\  |_| |_    / ____ \ |__| | |____| |\  |  | |   
  \____/|_|  |_|_| \_|_____|  /_/    \_\_____|______|_| \_|  |_|   v{}"#;

/// Application state
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
    metrics_collector: Arc<MetricsCollector>,
    agent_info: Arc<RwLock<AgentInfo>>,
    start_time: SystemTime,
}

/// Print startup message with ASCII art
async fn print_startup_message() {
    let term = Term::stdout();
    let _ = term.clear_screen();
    
    // Print banner with version
    println!("{}", style(BANNER.replace("{}", env!("CARGO_PKG_VERSION"))).cyan().bold());
    println!();
    
    // Print startup information
    println!("{}", style("═════════════════════════════════════════════════════").cyan());
    println!("{} {}", style("▶").green().bold(), style("STARTING DOCKER AGENT").white().bold());
    println!("{}", style("═════════════════════════════════════════════════════").cyan());
    println!();
}

/// Print status message with symbol
async fn print_status_message(message: &str, success: bool) {
    let status_symbol = if success { "✓" } else { "✗" };
    let status_style = if success { style(status_symbol).green().bold() } else { style(status_symbol).red().bold() };
    
    println!("  {} {}", status_style, style(message).white());
}

#[rocket::main]
async fn main() -> OmniAgentResult<()> {
    // Print startup banner before initializing logging
    print_startup_message().await;
    
    // Initialize logging with tracing
    tracing_subscriber::fmt()
        .with_env_filter(
            tracing_subscriber::EnvFilter::try_from_default_env()
                .unwrap_or_else(|_| "omniagent=info".into()),
        )
        .with_file(true)
        .with_line_number(true)
        .init();

    // Initialize Docker manager
    println!("{}", style("INITIALIZING SERVICES").yellow().bold());
    let docker_manager = match DockerManager::new().await {
        Ok(manager) => {
            print_status_message("Docker manager initialized successfully", true).await;
            manager
        },
        Err(e) => {
            print_status_message(&format!("Docker initialization failed: {}", e), false).await;
            println!("  {} {}", style("⟳").yellow().bold(), style("Attempting automatic initialization...").white());
            
            match DockerManager::initialize().await {
                Ok(manager) => {
                    print_status_message("Docker successfully initialized", true).await;
                    manager
                }
                Err(e) => {
                    print_status_message(&format!("Automatic initialization failed: {}", e), false).await;
                    return Err(e);
                }
            }
        }
    };

    // Initialize authentication
    let token_store = initialize_auth();
    print_status_message("Authentication service initialized", true).await;

    // Initialize agent information
    let agent_info = Arc::new(RwLock::new(initialize_agent_info()));
    print_status_message("Agent information initialized", true).await;

    // Start agent heartbeat task
    start_heartbeat_task(agent_info.clone());
    print_status_message("Agent heartbeat service started", true).await;

    // Create application state
    let start_time = SystemTime::now();
    let docker_manager = Arc::new(Mutex::new(docker_manager));
    
    // Initialize metrics collector
    let metrics_collector = Arc::new(MetricsCollector::new(
        Arc::new(RwLock::new(docker_manager.lock().await.clone())),
        30, // Collect metrics every 30 seconds
    ));
    metrics_collector.start_collection_task();
    print_status_message("Metrics collection service started", true).await;
    
    let app_state = AppState { 
        docker_manager, 
        metrics_collector: metrics_collector.clone(),
        agent_info: agent_info.clone(),
        start_time,
    };
    
    // Start the API server
    println!();
    println!("{}", style("STARTING API SERVER").yellow().bold());
    print_status_message("Configuring API endpoints", true).await;
    
    println!();
    println!("{}", style("═════════════════════════════════════════════════════").cyan());
    println!("{} {}", 
        style("▶").green().bold(), 
        style("OMNI AGENT READY").white().bold()
    );
    println!("{}", style("═════════════════════════════════════════════════════").cyan());
    println!("  {} {}", style("API:").yellow().bold(), style("http://localhost:8081/api").white());
    println!("  {} {}", style("METRICS:").yellow().bold(), style("http://localhost:8081/metrics").white());
    println!("  {} {}", style("DOCKER TCP:").yellow().bold(), style("localhost:2375").white());
    println!("{}", style("═════════════════════════════════════════════════════").cyan());
    
    // Start the Rocket server with all our API routes
    let rocket_config = rocket::Config {
        address: IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)),
        port: 8081,
        ..rocket::Config::default()
    };
    
    let _ = rocket::custom(rocket_config)
        .manage(app_state)
        .manage(token_store)
        .manage(metrics_collector)
        .manage(agent_info)
        .mount("/api", configure_routes())
        .mount("/metrics", metrics::routes())
        .launch()
        .await
        .expect("Failed to launch Rocket server");

    Ok(())
}
$$--GLUE--$$
.\src\metrics\collector.rs
$$--GLUE--$$
pub mod collector;

// Re-export commonly used items
pub use collector::{MetricsCollector, SystemMetricsSnapshot};
$$--GLUE--$$
.\src\models\agent.rs
$$--GLUE--$$
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AgentInfo {
    pub id: String,
    pub name: String,
    pub version: String,
    pub host: String,
    pub ip_address: String,
    pub status: AgentStatus,
    pub last_heartbeat: String,
    pub director_url: Option<String>,
    pub labels: HashMap<String, String>,
    pub capabilities: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum AgentStatus {
    #[serde(rename = "connected")]
    Connected,
    #[serde(rename = "disconnected")]
    Disconnected,
    #[serde(rename = "initializing")]
    Initializing,
    #[serde(rename = "error")]
    Error,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AgentRegistrationRequest {
    pub director_url: String,
    pub token: String,
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AgentRegistrationResponse {
    pub id: String,
    pub token: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AgentUpdateRequest {
    pub labels: Option<HashMap<String, String>>,
    pub maintenance_mode: Option<bool>,
}
$$--GLUE--$$
.\src\models\containers.rs
$$--GLUE--$$
use std::collections::HashMap;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PortMapping {
    pub host: u16,
    pub container: u16,
    pub protocol: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolumeMapping {
    pub host: String,
    pub container: String,
    pub read_only: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ContainerConfig {
    pub name: String,
    pub image: String,
    pub command: Option<Vec<String>>,
    pub environment: HashMap<String, String>,
    pub ports: Option<Vec<PortMapping>>,
    pub volumes: Option<Vec<VolumeMapping>>,
    pub labels: Option<HashMap<String, String>>,
    pub restart_policy: Option<String>,
    pub network: Option<String>,
    pub auto_remove: Option<bool>,
    pub start: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ContainerDetails {
    pub id: String,
    pub name: String,
    pub image: String,
    pub status: String,
    pub created: String,
    pub ports: Vec<PortMapping>,
    pub labels: HashMap<String, String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ContainersList {
    pub containers: Vec<ContainerDetails>,
    pub count: usize,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ContainerLogs {
    pub container_id: String,
    pub logs: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExecConfig {
    pub cmd: Vec<String>,
    pub detach: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExecResponse {
    pub container_id: String,
    pub exec_id: String,
    pub output: String,
}
$$--GLUE--$$
.\src\models\images.rs
$$--GLUE--$$
use std::collections::HashMap;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ImagePullConfig {
    pub image: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ImageBuildConfig {
    pub context_path: String,
    pub dockerfile: Option<String>,
    pub tag: Option<String>,
    pub build_args: Option<HashMap<String, String>>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ImageDetails {
    pub id: String,
    pub tags: Vec<String>,
    pub created: String,
    pub size: i64,
    pub virtual_size: i64,
    pub labels: HashMap<String, String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ImagesList {
    pub images: Vec<ImageDetails>,
    pub count: usize,
}
$$--GLUE--$$
.\src\models\mod.rs
$$--GLUE--$$
pub mod containers;
pub mod images;
pub mod volumes;
pub mod networks;
pub mod system;
pub mod agent;

// Common response types
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct ApiResponse<T> {
    pub success: bool,
    pub message: Option<String>,
    pub data: Option<T>,
    pub error: Option<String>,
}

impl<T> ApiResponse<T> {
    pub fn success(data: T, message: Option<String>) -> Self {
        ApiResponse {
            success: true,
            message,
            data: Some(data),
            error: None,
        }
    }

    pub fn error(error: String) -> Self {
        ApiResponse {
            success: false,
            message: None,
            data: None,
            error: Some(error),
        }
    }
}
$$--GLUE--$$
.\src\models\networks.rs
$$--GLUE--$$
use std::collections::HashMap;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NetworkConfig {
    pub name: String,
    pub driver: Option<String>,
    pub internal: Option<bool>,
    pub options: Option<HashMap<String, String>>,
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NetworkDetails {
    pub id: String,
    pub name: String,
    pub driver: String,
    pub internal: bool,
    pub scope: String,
    pub created: String,
    pub labels: HashMap<String, String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NetworksList {
    pub networks: Vec<NetworkDetails>,
    pub count: usize,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NetworkConnectRequest {
    pub container_id: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NetworkDisconnectRequest {
    pub container_id: String,
    pub force: Option<bool>,
}
$$--GLUE--$$
.\src\models\system.rs
$$--GLUE--$$
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SystemMetrics {
    pub containers_running: i64,
    pub containers_total: i64,
    pub containers_paused: i64,
    pub containers_stopped: i64,
    pub images: i64,
    pub memory_total: i64,
    pub cpu_count: i64,
    pub docker_version: String,
    pub os_type: String,
    pub architecture: String,
    pub kernel_version: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SystemPruneRequest {
    pub volumes: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SystemPruneResponse {
    pub space_reclaimed: u64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SystemHealthResponse {
    pub status: String,
    pub docker_ping: bool,
    pub agent_version: String,
    pub uptime_seconds: u64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EventsResponse {
    pub events: Vec<EventInfo>,
    pub count: usize,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EventInfo {
    pub event_type: String,
    pub action: String,
    pub actor_id: String,
    pub actor_name: Option<String>,
    pub time: u64,
}
$$--GLUE--$$
.\src\models\volumes.rs
$$--GLUE--$$
use std::collections::HashMap;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolumeConfig {
    pub name: String,
    pub driver: Option<String>,
    pub driver_opts: Option<HashMap<String, String>>,
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolumeDetails {
    pub name: String,
    pub driver: String,
    pub mountpoint: String,
    pub scope: String,
    pub labels: HashMap<String, String>,
    pub created_at: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolumesList {
    pub volumes: Vec<VolumeDetails>,
    pub count: usize,
}
$$--GLUE--$$
.\src\api\agent.rs
$$--GLUE--$$
use rocket::{get, post, routes, serde::json::Json, State};
use rocket::http::Status;
use std::collections::HashMap;
use std::net::IpAddr;
use std::sync::Arc;
use std::time::{Duration, SystemTime};
use tokio::sync::{Mutex, RwLock};
use tracing::{error, info};
use uuid::Uuid;

use crate::docker::DockerManager;
use crate::models::ApiResponse;
use crate::models::agent::{
    AgentInfo, AgentRegistrationRequest, AgentRegistrationResponse, AgentStatus, AgentUpdateRequest,
};

/// App state with Docker manager and agent configuration
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
    agent_info: Arc<RwLock<AgentInfo>>,
    start_time: SystemTime,
}

/// Get agent status
#[get("/agent/status")]
async fn get_agent_status(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<AgentInfo>>, Status> {
    let agent_info = state.agent_info.read().await.clone();
    
    Ok(Json(ApiResponse::success(
        agent_info,
        Some("Agent status retrieved successfully".to_string()),
    )))
}

/// Register agent with a director
#[post("/agent/register", data = "<request>")]
async fn register_agent(
    state: &State<AppState>,
    request: Json<AgentRegistrationRequest>,
) -> Result<Json<ApiResponse<AgentRegistrationResponse>>, Status> {
    info!("Registering agent with director: {}", request.director_url);
    
    // Generate registration token for bi-directional authentication
    let token = Uuid::new_v4().to_string();
    
    // Update agent info with director URL
    {
        let mut agent_info = state.agent_info.write().await;
        agent_info.director_url = Some(request.director_url.clone());
        agent_info.status = AgentStatus::Connected;
        
        // Update agent labels if provided
        if let Some(new_labels) = &request.labels {
            for (key, value) in new_labels {
                agent_info.labels.insert(key.clone(), value.clone());
            }
        }
    }
    
    // Create response
    let response = AgentRegistrationResponse {
        id: state.agent_info.read().await.id.clone(),
        token,
    };
    
    Ok(Json(ApiResponse::success(
        response,
        Some("Agent registered successfully".to_string()),
    )))
}

/// Update agent configuration
#[post("/agent/update", data = "<request>")]
async fn update_agent(
    state: &State<AppState>,
    request: Json<AgentUpdateRequest>,
) -> Result<Json<ApiResponse<AgentInfo>>, Status> {
    info!("Updating agent configuration");
    
    // Update agent info with new configuration
    {
        let mut agent_info = state.agent_info.write().await;
        
        // Update agent labels if provided
        if let Some(new_labels) = &request.labels {
            for (key, value) in new_labels {
                agent_info.labels.insert(key.clone(), value.clone());
            }
        }
        
        // Update maintenance mode if provided
        if let Some(maintenance_mode) = request.maintenance_mode {
            if maintenance_mode {
                agent_info.status = AgentStatus::Disconnected;
            } else {
                agent_info.status = AgentStatus::Connected;
            }
        }
    }
    
    // Return updated agent info
    let updated_info = state.agent_info.read().await.clone();
    
    Ok(Json(ApiResponse::success(
        updated_info,
        Some("Agent configuration updated successfully".to_string()),
    )))
}

/// Send heartbeat to director
async fn send_heartbeat(agent_info: &AgentInfo) -> Result<(), Box<dyn std::error::Error>> {
    // If director URL is available, send heartbeat
    if let Some(director_url) = &agent_info.director_url {
        let client = reqwest::Client::new();
        let heartbeat_url = format!("{}/api/agents/{}/heartbeat", director_url, agent_info.id);
        
        client.post(heartbeat_url)
            .json(agent_info)
            .send()
            .await?;
    }
    
    Ok(())
}

/// Initialize agent information
pub fn initialize_agent_info() -> AgentInfo {
    // Get hostname, this is platform-specific
    let hostname = hostname::get()
        .map(|h| h.to_string_lossy().to_string())
        .unwrap_or_else(|_| "unknown".to_string());
    
    // Get IP address, this is simplified
    let ip_address = "127.0.0.1".to_string();
    
    // Create default agent info
    AgentInfo {
        id: Uuid::new_v4().to_string(),
        name: hostname.clone(),
        version: env!("CARGO_PKG_VERSION").to_string(),
        host: hostname,
        ip_address,
        status: AgentStatus::Initializing,
        last_heartbeat: chrono::Utc::now().to_rfc3339(),
        director_url: None,
        labels: HashMap::new(),
        capabilities: vec![
            "containers".to_string(),
            "images".to_string(),
            "volumes".to_string(),
            "networks".to_string(),
        ],
    }
}

/// Start heartbeat task to periodically send heartbeats to director
pub fn start_heartbeat_task(agent_info: Arc<RwLock<AgentInfo>>) {
    tokio::spawn(async move {
        let heartbeat_interval = Duration::from_secs(30);
        let mut interval = tokio::time::interval(heartbeat_interval);
        
        loop {
            interval.tick().await;
            
            // Update last heartbeat time
            {
                let mut info = agent_info.write().await;
                info.last_heartbeat = chrono::Utc::now().to_rfc3339();
                
                // Try to send heartbeat to director
                if let Err(e) = send_heartbeat(&info).await {
                    error!("Failed to send heartbeat: {}", e);
                    
                    // If heartbeat fails, mark as disconnected
                    if matches!(info.status, AgentStatus::Connected) {
                        info.status = AgentStatus::Disconnected;
                    }
                } else if matches!(info.status, AgentStatus::Disconnected) {
                    // If heartbeat succeeds and agent was disconnected, mark as connected
                    info.status = AgentStatus::Connected;
                }
            }
        }
    });
}

/// Configure agent routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        get_agent_status,
        register_agent,
        update_agent,
    ]
}
$$--GLUE--$$
.\src\api\containers.rs
$$--GLUE--$$
use rocket::{delete, get, post, put, routes, serde::json::Json, State};
use rocket::http::Status;
use std::sync::Arc;
use tokio::sync::Mutex;
use tracing::{error, info};

use crate::docker::DockerManager;
use crate::models::ApiResponse;
use crate::models::containers::{
    ContainerConfig, ContainerDetails, ContainerLogs, ContainersList, ExecConfig, ExecResponse,
};

/// Get all app state with Docker manager
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
}

/// List all containers
#[get("/containers?<all>")]
async fn list_containers(
    state: &State<AppState>,
    all: Option<bool>,
) -> Result<Json<ApiResponse<ContainersList>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.list_containers(all.unwrap_or(false)).await {
        Ok(containers) => {
            let count = containers.count;
            Ok(Json(ApiResponse::success(
                containers,
                Some(format!("Found {} containers", count)),
            )))
        }
        Err(e) => {
            error!("Failed to list containers: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Create a new container
#[post("/containers", data = "<config>")]
async fn create_container(
    state: &State<AppState>,
    config: Json<ContainerConfig>,
) -> Result<Json<ApiResponse<ContainerDetails>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.create_container(config.0).await {
        Ok(container) => {
            let container_id = container.id.clone();
            info!("Container created: {}", container_id);
            Ok(Json(ApiResponse::success(
                container,
                Some(format!("Container created successfully: {}", container_id)),
            )))
        }
        Err(e) => {
            error!("Failed to create container: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get container details
#[get("/containers/<id>")]
async fn get_container(
    state: &State<AppState>,
    id: String,
) -> Result<Json<ApiResponse<ContainerDetails>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.inspect_container(&id).await {
        Ok(container) => {
            Ok(Json(ApiResponse::success(
                container,
                Some(format!("Container details: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to get container details: {}", e);
            Err(Status::NotFound)
        }
    }
}

/// Start a container
#[post("/containers/<id>/start")]
async fn start_container(
    state: &State<AppState>,
    id: String,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.start_container(&id).await {
        Ok(_) => {
            info!("Container started: {}", id);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Container started: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to start container: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Stop a container
#[post("/containers/<id>/stop?<timeout>")]
async fn stop_container(
    state: &State<AppState>,
    id: String,
    timeout: Option<i64>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.stop_container(&id, timeout).await {
        Ok(_) => {
            info!("Container stopped: {}", id);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Container stopped: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to stop container: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Restart a container
#[post("/containers/<id>/restart?<timeout>")]
async fn restart_container(
    state: &State<AppState>,
    id: String,
    timeout: Option<i64>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.restart_container(&id, timeout).await {
        Ok(_) => {
            info!("Container restarted: {}", id);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Container restarted: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to restart container: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Remove a container
#[delete("/containers/<id>?<force>&<remove_volumes>")]
async fn remove_container(
    state: &State<AppState>,
    id: String,
    force: Option<bool>,
    remove_volumes: Option<bool>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager
        .remove_container(&id, force.unwrap_or(false), remove_volumes.unwrap_or(false))
        .await
    {
        Ok(_) => {
            info!("Container removed: {}", id);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Container removed: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to remove container: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get container logs
#[get("/containers/<id>/logs?<tail>")]
async fn get_container_logs(
    state: &State<AppState>,
    id: String,
    tail: Option<i64>,
) -> Result<Json<ApiResponse<ContainerLogs>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.get_container_logs(&id, tail).await {
        Ok(logs) => {
            let container_logs = ContainerLogs {
                container_id: id.clone(),
                logs,
            };
            
            Ok(Json(ApiResponse::success(
                container_logs,
                Some(format!("Container logs: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to get container logs: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Execute a command in a container
#[post("/containers/<id>/exec", data = "<config>")]
async fn exec_in_container(
    state: &State<AppState>,
    id: String,
    config: Json<ExecConfig>,
) -> Result<Json<ApiResponse<ExecResponse>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.exec_in_container(&id, config.0).await {
        Ok(output) => {
            let exec_response = ExecResponse {
                container_id: id.clone(),
                exec_id: "exec-id".to_string(), // Not returned by our CLI implementation
                output,
            };
            
            Ok(Json(ApiResponse::success(
                exec_response,
                Some(format!("Command executed in container: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to execute command in container: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Configure container routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        list_containers,
        create_container,
        get_container,
        start_container,
        stop_container,
        restart_container,
        remove_container,
        get_container_logs,
        exec_in_container,
    ]
}
$$--GLUE--$$
.\src\api\images.rs
$$--GLUE--$$
use rocket::{delete, get, post, routes, serde::json::Json, State};
use rocket::http::Status;
use std::sync::Arc;
use tokio::sync::Mutex;
use tracing::{error, info};

use crate::docker::DockerManager;
use crate::models::ApiResponse;
use crate::models::images::{
    ImageBuildConfig, ImageDetails, ImagePullConfig, ImagesList,
};

/// App state with Docker manager
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
}

/// List all images
#[get("/images?<all>")]
async fn list_images(
    state: &State<AppState>,
    all: Option<bool>,
) -> Result<Json<ApiResponse<ImagesList>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.list_images(all.unwrap_or(false)).await {
        Ok(images) => {
            let count = images.count;
            Ok(Json(ApiResponse::success(
                images,
                Some(format!("Found {} images", count)),
            )))
        }
        Err(e) => {
            error!("Failed to list images: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Pull an image
#[post("/images/pull", data = "<config>")]
async fn pull_image(
    state: &State<AppState>,
    config: Json<ImagePullConfig>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    let image_name = config.image.clone();
    
    match docker_manager.pull_image((*config).clone()).await {
        Ok(_) => {
            info!("Image pulled: {}", image_name);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Image pulled successfully: {}", config.image)),
            )))
        }
        Err(e) => {
            error!("Failed to pull image: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Remove an image
#[delete("/images/<id>?<force>")]
async fn remove_image(
    state: &State<AppState>,
    id: String,
    force: Option<bool>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.remove_image(&id, force.unwrap_or(false)).await {
        Ok(_) => {
            info!("Image removed: {}", id);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Image removed successfully: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to remove image: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Build an image
#[post("/images/build", data = "<config>")]
async fn build_image(
    state: &State<AppState>,
    config: Json<ImageBuildConfig>,
) -> Result<Json<ApiResponse<String>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.build_image(config.0).await {
        Ok(image_id) => {
            info!("Image built: {}", image_id);
            Ok(Json(ApiResponse::success(
                image_id.clone(),
                Some(format!("Image built successfully: {}", image_id)),
            )))
        }
        Err(e) => {
            error!("Failed to build image: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get image details
#[get("/images/<id>")]
async fn get_image(
    state: &State<AppState>,
    id: String,
) -> Result<Json<ApiResponse<ImageDetails>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.inspect_image(&id).await {
        Ok(image) => {
            Ok(Json(ApiResponse::success(
                image,
                Some(format!("Image details: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to get image details: {}", e);
            Err(Status::NotFound)
        }
    }
}

/// Configure image routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        list_images,
        pull_image,
        remove_image,
        build_image,
        get_image,
    ]
}
$$--GLUE--$$
.\src\api\metrics.rs
$$--GLUE--$$
use rocket::{get, routes, State};
use rocket::http::{ContentType, Status};
use rocket::response::content;
use rocket::response::content::Custom;
use std::sync::Arc;
use tracing::{error, info};

use crate::metrics::{MetricsCollector, export_prometheus_metrics};

/// App state with metrics collector
struct AppState {
    metrics_collector: Arc<MetricsCollector>,
}

/// Get Prometheus formatted metrics
#[get("/metrics")]
async fn get_prometheus_metrics(
    state: &State<AppState>,
) -> Result<Custom<String>, Status> {
    match export_prometheus_metrics(&state.metrics_collector).await {
        Ok(metrics) => {
            Ok(content::Custom(ContentType::Plain, metrics))
        }
        Err(e) => {
            error!("Failed to export Prometheus metrics: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get latest metrics snapshot as JSON
#[get("/metrics/json")]
async fn get_metrics_json(
    state: &State<AppState>,
) -> Result<rocket::serde::json::Json<crate::models::system::SystemMetrics>, Status> {
    match state.metrics_collector.get_latest().await {
        Some(snapshot) => {
            Ok(rocket::serde::json::Json(snapshot.metrics))
        }
        None => {
            // Try to collect metrics now
            match state.metrics_collector.collect_now().await {
                Ok(snapshot) => {
                    Ok(rocket::serde::json::Json(snapshot.metrics))
                }
                Err(e) => {
                    error!("Failed to collect metrics: {}", e);
                    Err(Status::InternalServerError)
                }
            }
        }
    }
}

/// Configure metrics routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        get_prometheus_metrics,
        get_metrics_json,
    ]
}
$$--GLUE--$$
.\src\api\mod.rs
$$--GLUE--$$
pub mod routes;
pub mod containers;
pub mod images;
pub mod volumes;
pub mod networks;
pub mod system;
pub mod agent;

// Re-export routes and common functions
pub use routes::configure_routes;
$$--GLUE--$$
.\src\api\networks.rs
$$--GLUE--$$
use rocket::{delete, get, post, routes, serde::json::Json, State};
use rocket::http::Status;
use std::sync::Arc;
use tokio::sync::Mutex;
use tracing::{error, info};

use crate::docker::DockerManager;
use crate::models::ApiResponse;
use crate::models::networks::{
    NetworkConfig, NetworkDetails, NetworksList, NetworkConnectRequest, NetworkDisconnectRequest,
};

/// App state with Docker manager
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
}

/// List all networks
#[get("/networks")]
async fn list_networks(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<NetworksList>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.list_networks().await {
        Ok(networks) => {
            // Convert Docker network models to our API models
            let network_details = networks
                .iter()
                .map(|n| NetworkDetails {
                    id: n.id.clone().unwrap_or_default(),
                    name: n.name.clone().unwrap_or_default(),
                    driver: n.driver.clone().unwrap_or_default(),
                    internal: n.internal.unwrap_or(false),
                    scope: n.scope.clone().unwrap_or_default(),
                    created: n.created.clone().unwrap_or_default(),
                    labels: n.labels.clone().unwrap_or_default(),
                })
                .collect::<Vec<_>>();
            
            let count = network_details.len();
            let response = NetworksList {
                networks: network_details,
                count,
            };
            
            Ok(Json(ApiResponse::success(
                response,
                Some(format!("Found {} networks", count)),
            )))
        }
        Err(e) => {
            error!("Failed to list networks: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Create a network
#[post("/networks", data = "<config>")]
async fn create_network(
    state: &State<AppState>,
    config: Json<NetworkConfig>,
) -> Result<Json<ApiResponse<String>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.create_network(config.0).await {
        Ok(id) => {
            info!("Network created: {}", id);
            Ok(Json(ApiResponse::success(
                id.clone(),
                Some(format!("Network created successfully: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to create network: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get network details
#[get("/networks/<id>")]
async fn get_network(
    state: &State<AppState>,
    id: String,
) -> Result<Json<ApiResponse<NetworkDetails>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.inspect_network(&id).await {
        Ok(network) => {
            let network_details = NetworkDetails {
                id: network.id.unwrap_or_default(),
                name: network.name.unwrap_or_default(),
                driver: network.driver.unwrap_or_default(),
                internal: network.internal.unwrap_or(false),
                scope: network.scope.unwrap_or_default(),
                created: network.created.unwrap_or_default(),
                labels: network.labels.unwrap_or_default(),
            };
            
            Ok(Json(ApiResponse::success(
                network_details,
                Some(format!("Network details: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to get network details: {}", e);
            Err(Status::NotFound)
        }
    }
}

/// Remove a network
#[delete("/networks/<id>")]
async fn remove_network(
    state: &State<AppState>,
    id: String,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.remove_network(&id).await {
        Ok(_) => {
            info!("Network removed: {}", id);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Network removed successfully: {}", id)),
            )))
        }
        Err(e) => {
            error!("Failed to remove network: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Connect a container to a network
#[post("/networks/<id>/connect", data = "<request>")]
async fn connect_container(
    state: &State<AppState>,
    id: String,
    request: Json<NetworkConnectRequest>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager
        .connect_container_to_network(&id, &request.container_id)
        .await
    {
        Ok(_) => {
            info!(
                "Container {} connected to network {}",
                request.container_id, id
            );
            Ok(Json(ApiResponse::success(
                (),
                Some(format!(
                    "Container {} connected to network {} successfully",
                    request.container_id, id
                )),
            )))
        }
        Err(e) => {
            error!(
                "Failed to connect container {} to network {}: {}",
                request.container_id, id, e
            );
            Err(Status::InternalServerError)
        }
    }
}

/// Disconnect a container from a network
#[post("/networks/<id>/disconnect", data = "<request>")]
async fn disconnect_container(
    state: &State<AppState>,
    id: String,
    request: Json<NetworkDisconnectRequest>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager
        .disconnect_container_from_network(
            &id,
            &request.container_id,
            request.force.unwrap_or(false),
        )
        .await
    {
        Ok(_) => {
            info!(
                "Container {} disconnected from network {}",
                request.container_id, id
            );
            Ok(Json(ApiResponse::success(
                (),
                Some(format!(
                    "Container {} disconnected from network {} successfully",
                    request.container_id, id
                )),
            )))
        }
        Err(e) => {
            error!(
                "Failed to disconnect container {} from network {}: {}",
                request.container_id, id, e
            );
            Err(Status::InternalServerError)
        }
    }
}

/// Prune unused networks
#[post("/networks/prune")]
async fn prune_networks(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<u64>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.prune_networks().await {
        Ok(networks_deleted) => {
            info!("Networks pruned: {} networks deleted", networks_deleted);
            Ok(Json(ApiResponse::success(
                networks_deleted,
                Some(format!("Networks pruned: {} networks deleted", networks_deleted)),
            )))
        }
        Err(e) => {
            error!("Failed to prune networks: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Configure network routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        list_networks,
        create_network,
        get_network,
        remove_network,
        connect_container,
        disconnect_container,
        prune_networks,
    ]
}
$$--GLUE--$$
.\src\api\routes.rs
$$--GLUE--$$
use rocket::Route;

use crate::api::{
    agent, containers, images, networks, system, volumes,
};

/// Configure all API routes
pub fn configure_routes() -> Vec<Route> {
    let mut routes = Vec::new();
    
    // Add container routes
    routes.extend(containers::routes());
    
    // Add image routes
    routes.extend(images::routes());
    
    // Add volume routes
    routes.extend(volumes::routes());
    
    // Add network routes
    routes.extend(networks::routes());
    
    // Add system routes
    routes.extend(system::routes());
    
    // Add agent routes
    routes.extend(agent::routes());
    
    routes
}
$$--GLUE--$$
.\src\api\system.rs
$$--GLUE--$$
use rocket::{get, post, routes, serde::json::Json, State};
use rocket::http::Status;
use std::sync::Arc;
use std::time::{Duration, SystemTime, UNIX_EPOCH};
use tokio::sync::Mutex;
use tracing::{error, info};

use crate::docker::DockerManager;
use crate::models::ApiResponse;
use crate::models::system::{
    EventInfo, EventsResponse, SystemHealthResponse, SystemMetrics, SystemPruneRequest,
    SystemPruneResponse,
};

/// App state with Docker manager
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
    start_time: SystemTime,
}

/// Get system information
// #[get("/system/info")]
// async fn get_system_info(
//     state: &State<AppState>,
// ) -> Result<Json<ApiResponse<bollard::system::Info>>, Status> {
//     let docker_manager = state.docker_manager.lock().await;
    
//     match docker_manager.get_system_info().await {
//         Ok(info) => {
//             Ok(Json(ApiResponse::success(
//                 info,
//                 Some("System information retrieved successfully".to_string()),
//             )))
//         }
//         Err(e) => {
//             error!("Failed to get system information: {}", e);
//             Err(Status::InternalServerError)
//         }
//     }
// }

/// Get system health
#[get("/system/health")]
async fn get_system_health(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<SystemHealthResponse>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    // Get Docker daemon ping status
    // let docker_ping = match docker_manager.ping().await {
    //     Ok(ping) => ping,
    //     Err(_) => false,
    // };
    
    // Calculate agent uptime
    let uptime = state
        .start_time
        .elapsed()
        .unwrap_or(Duration::from_secs(0))
        .as_secs();
    
    let health = SystemHealthResponse {
        status: "healthy".to_string(),
        docker_ping: true,
    //    status: if docker_ping { "healthy".to_string() } else { "unhealthy".to_string() },
    //    docker_ping,
        agent_version: env!("CARGO_PKG_VERSION").to_string(),
        uptime_seconds: uptime,
    };
    
    Ok(Json(ApiResponse::success(
        health,
        Some("System health retrieved successfully".to_string()),
    )))
}

/// Get system metrics
#[get("/system/metrics")]
async fn get_system_metrics(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<SystemMetrics>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.get_system_metrics().await {
        Ok(metrics) => {
            Ok(Json(ApiResponse::success(
                metrics,
                Some("System metrics retrieved successfully".to_string()),
            )))
        }
        Err(e) => {
            error!("Failed to get system metrics: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get system events
#[get("/system/events?<timeout>")]
async fn get_system_events(
    state: &State<AppState>,
    timeout: Option<u64>,
) -> Result<Json<ApiResponse<EventsResponse>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager
        .get_system_events(timeout.unwrap_or(5))
        .await
    {
        Ok(events) => {
            // Convert Docker event models to our API models
            let event_infos = events
                .iter()
                .map(|e| EventInfo {
                    event_type: e.typ.unwrap().to_string(),
                    action: e.action.clone().unwrap_or_default(),
                    actor_id: e.actor.as_ref().and_then(|a| a.id.clone()).unwrap_or_default(),
                    actor_name: e
                        .actor
                        .as_ref()
                        .and_then(|a| a.attributes.as_ref())
                        .and_then(|attrs| attrs.get("name").cloned()),
                    time: e.time.unwrap_or(0) as u64,
                })
                .collect::<Vec<_>>();
            
            let response = EventsResponse {
                events: event_infos,
                count: event_infos.len(),
            };
            
            Ok(Json(ApiResponse::success(
                response,
                Some(format!("Retrieved {} system events", response.count)),
            )))
        }
        Err(e) => {
            error!("Failed to get system events: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Prune system resources
#[post("/system/prune", data = "<request>")]
async fn prune_system(
    state: &State<AppState>,
    request: Json<SystemPruneRequest>,
) -> Result<Json<ApiResponse<SystemPruneResponse>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager
        .prune_system(request.volumes.unwrap_or(false))
        .await
    {
        Ok(space_reclaimed) => {
            info!("System pruned, reclaimed {} bytes", space_reclaimed);
            
            let response = SystemPruneResponse {
                space_reclaimed,
            };
            
            Ok(Json(ApiResponse::success(
                response,
                Some(format!("System pruned, reclaimed {} bytes", space_reclaimed)),
            )))
        }
        Err(e) => {
            error!("Failed to prune system: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Configure system routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        get_system_info,
        get_system_health,
        get_system_metrics,
        get_system_events,
        prune_system,
    ]
}
$$--GLUE--$$
.\src\api\volumes.rs
$$--GLUE--$$
use rocket::{delete, get, post, routes, serde::json::Json, State};
use rocket::http::Status;
use std::sync::Arc;
use tokio::sync::Mutex;
use tracing::{error, info};

use crate::docker::DockerManager;
use crate::models::ApiResponse;
use crate::models::volumes::{VolumeConfig, VolumeDetails, VolumesList};

/// App state with Docker manager
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
}

/// List all volumes
#[get("/volumes")]
async fn list_volumes(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<VolumesList>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.list_volumes().await {
        Ok(volumes) => {
            Ok(Json(ApiResponse::success(
                volumes,
                Some(format!("Found {} volumes", volumes.count)),
            )))
        }
        Err(e) => {
            error!("Failed to list volumes: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Create a volume
#[post("/volumes", data = "<config>")]
async fn create_volume(
    state: &State<AppState>,
    config: Json<VolumeConfig>,
) -> Result<Json<ApiResponse<VolumeDetails>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.create_volume(config.0).await {
        Ok(volume) => {
            info!("Volume created: {}", volume.name);
            
            Ok(Json(ApiResponse::success(
                volume,
                Some(format!("Volume created successfully: {}", volume.name)),
            )))
        }
        Err(e) => {
            error!("Failed to create volume: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Get volume details
#[get("/volumes/<name>")]
async fn get_volume(
    state: &State<AppState>,
    name: String,
) -> Result<Json<ApiResponse<VolumeDetails>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.inspect_volume(&name).await {
        Ok(volume) => {
            Ok(Json(ApiResponse::success(
                volume,
                Some(format!("Volume details: {}", name)),
            )))
        }
        Err(e) => {
            error!("Failed to get volume details: {}", e);
            Err(Status::NotFound)
        }
    }
}

/// Remove a volume
#[delete("/volumes/<name>?<force>")]
async fn remove_volume(
    state: &State<AppState>,
    name: String,
    force: Option<bool>,
) -> Result<Json<ApiResponse<()>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.remove_volume(&name, force.unwrap_or(false)).await {
        Ok(_) => {
            info!("Volume removed: {}", name);
            Ok(Json(ApiResponse::success(
                (),
                Some(format!("Volume removed successfully: {}", name)),
            )))
        }
        Err(e) => {
            error!("Failed to remove volume: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Prune unused volumes
#[post("/volumes/prune")]
async fn prune_volumes(
    state: &State<AppState>,
) -> Result<Json<ApiResponse<u64>>, Status> {
    let docker_manager = state.docker_manager.lock().await;
    
    match docker_manager.prune_volumes().await {
        Ok(space_reclaimed) => {
            info!("Volumes pruned, reclaimed {} bytes", space_reclaimed);
            Ok(Json(ApiResponse::success(
                space_reclaimed,
                Some(format!("Volumes pruned, reclaimed {} bytes", space_reclaimed)),
            )))
        }
        Err(e) => {
            error!("Failed to prune volumes: {}", e);
            Err(Status::InternalServerError)
        }
    }
}

/// Configure volume routes
pub fn routes() -> Vec<rocket::Route> {
    routes![
        list_volumes,
        create_volume,
        get_volume,
        remove_volume,
        prune_volumes,
    ]
}
$$--GLUE--$$
.\src\auth\middleware.rs
$$--GLUE--$$
use rocket::{
    request::{FromRequest, Outcome},
    Request,
};
use rocket::http::Status;
use std::sync::Arc;
use tokio::sync::RwLock;
use tracing::{debug, error, warn};

use crate::error::{OmniAgentError, OmniAgentResult};

/// Authentication token
#[derive(Debug, Clone)]
pub struct AuthToken {
    pub token: String,
    pub is_valid: bool,
}

/// Token store for managing valid tokens
pub struct TokenStore {
    tokens: Arc<RwLock<Vec<String>>>,
}

impl TokenStore {
    /// Create a new token store
    pub fn new() -> Self {
        TokenStore {
            tokens: Arc::new(RwLock::new(Vec::new())),
        }
    }

    /// Add a token to the store
    pub async fn add_token(&self, token: String) {
        let mut tokens = self.tokens.write().await;
        tokens.push(token);
    }

    /// Remove a token from the store
    pub async fn remove_token(&self, token: &str) {
        let mut tokens = self.tokens.write().await;
        tokens.retain(|t| t != token);
    }

    /// Check if a token is valid
    pub async fn is_valid(&self, token: &str) -> bool {
        let tokens = self.tokens.read().await;
        tokens.contains(&token.to_string())
    }
}

/// Authentication guard for Rocket requests
pub struct AuthenticationGuard {
    pub token: String,
}

#[rocket::async_trait]
impl<'r> FromRequest<'r> for AuthenticationGuard {
    type Error = OmniAgentError;

    async fn from_request(request: &'r Request<'_>) -> Outcome<Self, Self::Error> {
        // Get token store from Rocket managed state
        let token_store = match request.rocket().state::<TokenStore>() {
            Some(store) => store,
            None => {
                error!("Token store not found in Rocket state");
                return Outcome::Failure((
                    Status::InternalServerError,
                    OmniAgentError::AuthenticationError("Authentication system not initialized".to_string()),
                ));
            }
        };

        // Extract the authorization header
        let auth_header = match request.headers().get_one("Authorization") {
            Some(header) => header,
            None => {
                warn!("No Authorization header found");
                return Outcome::Failure((
                    Status::Unauthorized,
                    OmniAgentError::AuthenticationError("No Authorization header provided".to_string()),
                ));
            }
        };

        // Parse the token from the header
        if !auth_header.starts_with("Bearer ") {
            warn!("Invalid Authorization header format: {}", auth_header);
            return Outcome::Failure((
                Status::Unauthorized,
                OmniAgentError::AuthenticationError("Invalid Authorization header format".to_string()),
            ));
        }

        let token = auth_header.trim_start_matches("Bearer ").trim().to_string();
        if token.is_empty() {
            warn!("Empty token provided");
            return Outcome::Failure((
                Status::Unauthorized,
                OmniAgentError::AuthenticationError("Empty token provided".to_string()),
            ));
        }

        // Validate the token
        match token_store.is_valid(&token).await {
            true => {
                debug!("Token authenticated successfully");
                Outcome::Success(AuthenticationGuard { token })
            }
            false => {
                warn!("Invalid token provided: {}", token);
                Outcome::Failure((
                    Status::Unauthorized,
                    OmniAgentError::AuthenticationError("Invalid token".to_string()),
                ))
            }
        }
    }
}

/// Initialize the authentication system
pub fn initialize_auth() -> TokenStore {
    // Create token store
    let token_store = TokenStore::new();
    
    // Initialize with a default token for development
    // In production, this should be replaced with a more secure mechanism
    tokio::spawn({
        let token_store = token_store.clone();
        async move {
            token_store.add_token("omni-agent-dev-token".to_string()).await;
        }
    });
    
    token_store
}

impl TokenStore {
    /// Clone the token store
    pub fn clone(&self) -> Self {
        TokenStore {
            tokens: self.tokens.clone(),
        }
    }
}

/// Helper function to validate a token
pub async fn validate_token(token_store: &TokenStore, token: &str) -> OmniAgentResult<()> {
    if token_store.is_valid(token).await {
        Ok(())
    } else {
        Err(OmniAgentError::AuthenticationError("Invalid token".to_string()))
    }
}
$$--GLUE--$$
.\src\auth\mod.rs
$$--GLUE--$$
pub mod middleware;

// Re-export commonly used items
pub use middleware::{AuthenticationGuard, AuthToken};
$$--GLUE--$$
.\src\docker\containers.rs
$$--GLUE--$$
// src/docker/containers.rs
use std::collections::HashMap;
use tracing::{debug, error, info};
use serde_json::Value;

use crate::docker::DockerManager;
use crate::error::{OmniAgentError, OmniAgentResult};
use crate::models::containers::{ContainerConfig, ContainerDetails, ContainersList, ExecConfig};

impl DockerManager {
    /// List all containers
    pub async fn list_containers(&self, all: bool) -> OmniAgentResult<ContainersList> {
        debug!("Listing containers, show all: {}", all);
        
        // Build the Docker CLI command
        let mut args = vec!["container", "ls", "--format", "{{json .}}"];
        if all {
            args.push("--all");
        }
        
        // Run the Docker command
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            let stdout = String::from_utf8_lossy(&output.stdout);
            
            // Docker CLI outputs one JSON object per line
            let container_lines: Vec<&str> = stdout.lines().collect();
            let mut containers = Vec::with_capacity(container_lines.len());
            
            for line in container_lines {
                if line.trim().is_empty() {
                    continue;
                }
                
                match serde_json::from_str::<Value>(line) {
                    Ok(container_json) => {
                        // Extract container information from JSON
                        let id = container_json["ID"].as_str().unwrap_or_default().to_string();
                        let name = container_json["Names"].as_str().unwrap_or_default().to_string();
                        let image = container_json["Image"].as_str().unwrap_or_default().to_string();
                        let status = container_json["Status"].as_str().unwrap_or_default().to_string();
                        let created = container_json["CreatedAt"].as_str().unwrap_or_default().to_string();
                        
                        // Parse labels from JSON
                        let mut labels = HashMap::new();
                        if let Some(labels_str) = container_json["Labels"].as_str() {
                            for label_pair in labels_str.split(',') {
                                if let Some((key, value)) = label_pair.split_once('=') {
                                    labels.insert(key.to_string(), value.to_string());
                                }
                            }
                        }
                        
                        // Create container details
                        let container = ContainerDetails {
                            id,
                            name,
                            image,
                            status,
                            created,
                            ports: Vec::new(), // Would need parsing from "Ports" field
                            labels,
                        };
                        
                        containers.push(container);
                    }
                    Err(e) => {
                        error!("Failed to parse container JSON: {}", e);
                        error!("Invalid JSON: {}", line);
                        // Continue with other containers
                    }
                }
            }
            
            let count = containers.len();
            info!("Found {} containers", count);
            
            Ok(ContainersList { containers, count })
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to list containers: {}", error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Create a new container
    pub async fn create_container(&self, config: ContainerConfig) -> OmniAgentResult<ContainerDetails> {
        debug!("Creating container with name: {:?}", config.name);
        
        // Build the base command with container name
        let mut args = vec!["container", "create", "--name", &config.name];
        
        // Add environment variables
        for (key, value) in &config.environment {
            args.push("-e");
            args.push(&format!("{}={}", key, value));
        }
        
        // Add port mappings
        if let Some(ports) = &config.ports {
            for port in ports {
                args.push("-p");
                let protocol = port.protocol.as_deref().unwrap_or("tcp");
                args.push(&format!("{}:{}:{}", port.host, port.container, protocol));
            }
        }
        
        // Add volume mappings
        if let Some(volumes) = &config.volumes {
            for volume in volumes {
                args.push("-v");
                let read_only = if volume.read_only.unwrap_or(false) { ":ro" } else { "" };
                args.push(&format!("{}:{}{}", volume.host, volume.container, read_only));
            }
        }
        
        // Add labels
        args.push("--label");
        args.push("com.omniagent.managed=true");
        
        if let Some(labels) = &config.labels {
            for (key, value) in labels {
                args.push("--label");
                args.push(&format!("{}={}", key, value));
            }
        }
        
        // Add restart policy
        if let Some(policy) = &config.restart_policy {
            args.push("--restart");
            args.push(policy);
        }
        
        // Add network
        if let Some(network) = &config.network {
            args.push("--network");
            args.push(network);
        }
        
        // Add auto-remove flag
        if config.auto_remove.unwrap_or(false) {
            args.push("--rm");
        }
        
        // Add image and command
        args.push(&config.image);
        
        if let Some(cmd) = &config.command {
            args.extend(cmd);
        }
        
        // Execute the command
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            let container_id = String::from_utf8_lossy(&output.stdout).trim().to_string();
            info!("Container created with ID: {}", container_id);
            
            // Start the container if requested
            if config.start.unwrap_or(true) {
                match self.start_container(&container_id).await {
                    Ok(_) => info!("Container started: {}", container_id),
                    Err(e) => {
                        error!("Failed to start container {}: {}", container_id, e);
                        return Err(e);
                    }
                }
            }
            
            // Get full container details
            self.inspect_container(&container_id).await
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to create container: {}", error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Inspect a container
    pub async fn inspect_container(&self, id: &str) -> OmniAgentResult<ContainerDetails> {
        debug!("Inspecting container: {}", id);
        
        let args = vec!["container", "inspect", "--format", "{{json .}}", id];
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            let stdout = String::from_utf8_lossy(&output.stdout);
            
            match serde_json::from_str::<Value>(&stdout) {
                Ok(container_json) => {
                    // Extract container information from JSON
                    let config = &container_json["Config"];
                    let state = &container_json["State"];
                    
                    let container_id = container_json["Id"].as_str().unwrap_or_default().to_string();
                    let name = container_json["Name"].as_str().unwrap_or_default().trim_start_matches('/').to_string();
                    let image = config["Image"].as_str().unwrap_or_default().to_string();
                    let status = state["Status"].as_str().unwrap_or_default().to_string();
                    let created = container_json["Created"].as_str().unwrap_or_default().to_string();
                    
                    // Parse labels
                    let mut labels = HashMap::new();
                    if let Some(labels_obj) = config["Labels"].as_object() {
                        for (key, value) in labels_obj {
                            if let Some(val_str) = value.as_str() {
                                labels.insert(key.clone(), val_str.to_string());
                            }
                        }
                    }
                    
                    let container_details = ContainerDetails {
                        id: container_id,
                        name,
                        image,
                        status,
                        created,
                        ports: Vec::new(), // Would need to map port bindings from HostConfig
                        labels,
                    };
                    
                    Ok(container_details)
                }
                Err(e) => {
                    error!("Failed to parse container inspect JSON: {}", e);
                    Err(OmniAgentError::SerializationError(e))
                }
            }
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to inspect container {}: {}", id, error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Start a container
    pub async fn start_container(&self, id: &str) -> OmniAgentResult<()> {
        debug!("Starting container: {}", id);
        
        let args = vec!["container", "start", id];
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            info!("Container started: {}", id);
            Ok(())
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to start container {}: {}", id, error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Stop a container
    pub async fn stop_container(&self, id: &str, timeout: Option<i64>) -> OmniAgentResult<()> {
        debug!("Stopping container: {}", id);
        
        let mut args = vec!["container", "stop"];
        
        // Add timeout if specified
        if let Some(t) = timeout {
            args.push("--time");
            args.push(&t.to_string());
        }
        
        args.push(id);
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            info!("Container stopped: {}", id);
            Ok(())
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to stop container {}: {}", id, error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Restart a container
    pub async fn restart_container(&self, id: &str, timeout: Option<i64>) -> OmniAgentResult<()> {
        debug!("Restarting container: {}", id);
        
        let mut args = vec!["container", "restart"];
        
        // Add timeout if specified
        if let Some(t) = timeout {
            args.push("--time");
            args.push(&t.to_string());
        }
        
        args.push(id);
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            info!("Container restarted: {}", id);
            Ok(())
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to restart container {}: {}", id, error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Remove a container
    pub async fn remove_container(&self, id: &str, force: bool, remove_volumes: bool) -> OmniAgentResult<()> {
        debug!(
            "Removing container: {} (force: {}, remove volumes: {})",
            id, force, remove_volumes
        );
        
        let mut args = vec!["container", "rm"];
        
        if force {
            args.push("--force");
        }
        
        if remove_volumes {
            args.push("--volumes");
        }
        
        args.push(id);
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            info!("Container removed: {}", id);
            Ok(())
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to remove container {}: {}", id, error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Get container logs
    pub async fn get_container_logs(&self, id: &str, tail: Option<i64>) -> OmniAgentResult<String> {
        debug!("Getting logs for container: {}", id);
        
        let mut args = vec!["container", "logs"];
        
        if let Some(t) = tail {
            args.push("--tail");
            args.push(&t.to_string());
        }
        
        args.push(id);
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            let logs = String::from_utf8_lossy(&output.stdout).to_string();
            Ok(logs)
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to get logs for container {}: {}", id, error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Execute a command in a container
    pub async fn exec_in_container(&self, id: &str, config: ExecConfig) -> OmniAgentResult<String> {
        debug!("Executing command in container {}: {:?}", id, config.cmd);
        
        let mut args = vec!["container", "exec"];
        
        // Add detach option if specified
        if let Some(detach) = config.detach {
            if detach {
                args.push("--detach");
            }
        }
        
        args.push(id);
        args.extend(config.cmd.iter().map(|s| s.as_str()));
        
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            let output_text = String::from_utf8_lossy(&output.stdout).to_string();
            Ok(output_text)
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to execute command in container {}: {}", id, error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }
}
$$--GLUE--$$
.\src\docker\images.rs
$$--GLUE--$$
// src/docker/images.rs
use std::collections::HashMap;
use std::fs::{self, File};
use std::io::{self, Write};
use std::path::Path;
use std::process::Command;
use tracing::{debug, error, info};
use serde_json::Value;
use tempfile::tempdir;

use crate::docker::DockerManager;
use crate::error::{OmniAgentError, OmniAgentResult};
use crate::models::images::{ImageBuildConfig, ImageDetails, ImagesList, ImagePullConfig};

impl DockerManager {
    /// List all images
    pub async fn list_images(&self, all: bool) -> OmniAgentResult<ImagesList> {
        debug!("Listing images, show all: {}", all);
        
        // Build the Docker CLI command
        let mut args = vec!["image", "ls", "--format", "{{json .}}"];
        if all {
            args.push("--all");
        }
        
        // Run the Docker command
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            let stdout = String::from_utf8_lossy(&output.stdout);
            
            // Docker CLI outputs one JSON object per line
            let image_lines: Vec<&str> = stdout.lines().collect();
            let mut images = Vec::with_capacity(image_lines.len());
            
            for line in image_lines {
                if line.trim().is_empty() {
                    continue;
                }
                
                match serde_json::from_str::<Value>(line) {
                    Ok(image_json) => {
                        // Get detailed info for each image
                        let id = image_json["ID"].as_str().unwrap_or_default();
                        if let Ok(details) = self.inspect_image(id).await {
                            images.push(details);
                        }
                    }
                    Err(e) => {
                        error!("Failed to parse image JSON: {}", e);
                        error!("Invalid JSON: {}", line);
                        // Continue with other images
                    }
                }
            }
            
            let count = images.len();
            info!("Found {} images", count);
            
            Ok(ImagesList { images, count })
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to list images: {}", error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Pull an image
    pub async fn pull_image(&self, config: ImagePullConfig) -> OmniAgentResult<()> {
        debug!("Pulling image: {}", config.image);
        
        let args = vec!["image", "pull", &config.image];
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            info!("Image pulled successfully: {}", config.image);
            Ok(())
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to pull image '{}': {}", config.image, error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Remove an image
    pub async fn remove_image(&self, id: &str, force: bool) -> OmniAgentResult<()> {
        debug!("Removing image: {} (force: {})", id, force);
        
        let mut args = vec!["image", "rm"];
        
        if force {
            args.push("--force");
        }
        
        args.push(id);
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            info!("Image removed: {}", id);
            Ok(())
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to remove image {}: {}", id, error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Build an image from a Dockerfile
    pub async fn build_image(&self, config: ImageBuildConfig) -> OmniAgentResult<String> {
        debug!("Building image from context: {}", config.context_path);
        
        // Validate that the context path exists
        let context_path = Path::new(&config.context_path);
        if !context_path.exists() || !context_path.is_dir() {
            error!("Build context does not exist or is not a directory: {}", config.context_path);
            return Err(OmniAgentError::InvalidParameter(format!(
                "Build context does not exist or is not a directory: {}",
                config.context_path
            )));
        }
        
        // Prepare build command
        let mut args = vec!["image", "build"];
        
        // Add dockerfile path if specified
        if let Some(dockerfile) = &config.dockerfile {
            args.push("--file");
            args.push(dockerfile);
        }
        
        // Add tag if specified
        if let Some(tag) = &config.tag {
            args.push("--tag");
            args.push(tag);
        }
        
        // Add build args if specified
        if let Some(build_args) = &config.build_args {
            for (key, value) in build_args {
                args.push("--build-arg");
                args.push(&format!("{}={}", key, value));
            }
        }
        
        // Add context path
        args.push(&config.context_path);
        
        // Run the Docker command
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            // Parse the output to extract the image ID
            let stdout = String::from_utf8_lossy(&output.stdout);
            
            // The image ID is usually shown at the end of the build output
            // in a line like "Successfully built 1234abcd"
            let mut image_id = "unknown".to_string();
            for line in stdout.lines().rev() {
                if line.contains("Successfully built") {
                    if let Some(id) = line.split_whitespace().last() {
                        image_id = id.to_string();
                        break;
                    }
                }
            }
            
            info!("Image built successfully: {}", image_id);
            Ok(image_id)
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to build image: {}", error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Inspect an image
    pub async fn inspect_image(&self, id: &str) -> OmniAgentResult<ImageDetails> {
        debug!("Inspecting image: {}", id);
        
        let args = vec!["image", "inspect", "--format", "{{json .}}", id];
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            let stdout = String::from_utf8_lossy(&output.stdout);
            
            match serde_json::from_str::<Value>(&stdout) {
                Ok(image_json) => {
                    // Extract image information from JSON
                    let id = image_json["Id"].as_str().unwrap_or_default().to_string();
                    
                    // Extract tags
                    let tags = match image_json["RepoTags"].as_array() {
                        Some(tags_array) => tags_array
                            .iter()
                            .filter_map(|tag| tag.as_str().map(|s| s.to_string()))
                            .collect(),
                        None => Vec::new(),
                    };
                    
                    // Extract size information
                    let size = image_json["Size"].as_i64().unwrap_or(0);
                    let virtual_size = image_json["VirtualSize"].as_i64().unwrap_or(0);
                    let created = image_json["Created"].as_str().unwrap_or_default().to_string();
                    
                    // Extract labels
                    let mut labels = HashMap::new();
                    if let Some(config) = image_json["Config"].as_object() {
                        if let Some(labels_obj) = config.get("Labels").and_then(|l| l.as_object()) {
                            for (key, value) in labels_obj {
                                if let Some(val_str) = value.as_str() {
                                    labels.insert(key.clone(), val_str.to_string());
                                }
                            }
                        }
                    }
                    
                    let image_details = ImageDetails {
                        id,
                        tags,
                        created,
                        size,
                        virtual_size,
                        labels,
                    };
                    
                    Ok(image_details)
                }
                Err(e) => {
                    error!("Failed to parse image inspect JSON: {}", e);
                    Err(OmniAgentError::SerializationError(e))
                }
            }
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to inspect image {}: {}", id, error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }
}
$$--GLUE--$$
.\src\docker\manager.rs
$$--GLUE--$$
// src/docker/manager.rs
use std::process::{Command, Output};
use std::sync::Arc;
use tracing::{debug, error, info, warn};
use which::which;
use serde_json::Value;

use crate::error::{OmniAgentError, OmniAgentResult};

/// Docker client manager using direct CLI commands
pub struct DockerManager {
    // Configuration options could be stored here
    docker_path: String,
}

impl DockerManager {
    /// Create a new Docker manager
    pub async fn new() -> OmniAgentResult<Self> {
        // Check if Docker is installed
        let docker_path = match which("docker") {
            Ok(path) => {
                let path_str = path.to_string_lossy().to_string();
                info!("Docker found at: {}", path_str);
                path_str
            }
            Err(_) => {
                error!("Docker is not installed on this system");
                return Err(OmniAgentError::DockerNotInstalled);
            }
        };

        // Test connection to Docker
        match Self::run_docker_command(&["version", "--format", "{{json .}}"])? {
            output if output.status.success() => {
                let version_info = String::from_utf8_lossy(&output.stdout);
                if let Ok(json) = serde_json::from_str::<Value>(&version_info) {
                    if let Some(version) = json["Server"]["Version"].as_str() {
                        info!("Connected to Docker {}", version);
                    }
                }
                
                Ok(DockerManager { docker_path })
            }
            output => {
                let error = String::from_utf8_lossy(&output.stderr);
                error!("Docker is installed but not running: {}", error);
                Err(OmniAgentError::DockerNotRunning)
            }
        }
    }

    /// Initialize Docker if not already running
    pub async fn initialize() -> OmniAgentResult<Self> {
        info!("Checking for Docker installation");
        let docker_installed = which("docker").is_ok();

        if !docker_installed {
            #[cfg(target_os = "linux")]
            {
                info!("Attempting to install Docker on Linux");
                // This is a simplified example. In a real application,
                // you would want more robust installation logic.
                let output = Command::new("sh")
                    .arg("-c")
                    .arg("curl -fsSL https://get.docker.com | sh")
                    .output()?;

                if !output.status.success() {
                    let error = String::from_utf8_lossy(&output.stderr);
                    error!("Failed to install Docker: {}", error);
                    return Err(OmniAgentError::DockerInitFailed(format!(
                        "Installation failed: {}",
                        error
                    )));
                }
                info!("Docker installed successfully");
            }

            #[cfg(target_os = "macos")]
            {
                error!("Docker needs to be installed manually on macOS");
                info!("Please download Docker Desktop from https://www.docker.com/products/docker-desktop");
                return Err(OmniAgentError::DockerInitFailed(
                    "Please install Docker Desktop for Mac manually".to_string(),
                ));
            }

            #[cfg(target_os = "windows")]
            {
                error!("Docker needs to be installed manually on Windows");
                info!("Please download Docker Desktop from https://www.docker.com/products/docker-desktop");
                return Err(OmniAgentError::DockerInitFailed(
                    "Please install Docker Desktop for Windows manually".to_string(),
                ));
            }
        }

        // Start Docker service if not running
        info!("Attempting to start Docker service");
        Self::start_docker_service()?;

        // Try to connect again
        Self::new().await
    }

    /// Start the Docker service based on the platform
    fn start_docker_service() -> OmniAgentResult<()> {
        #[cfg(target_os = "linux")]
        {
            info!("Starting Docker service on Linux");
            let output = Command::new("sh")
                .arg("-c")
                .arg("sudo systemctl start docker")
                .output()?;

            if !output.status.success() {
                let error = String::from_utf8_lossy(&output.stderr);
                warn!("Failed to start Docker service: {}", error);
                return Err(OmniAgentError::DockerInitFailed(format!(
                    "Service start failed: {}",
                    error
                )));
            }
        }

        #[cfg(target_os = "macos")]
        {
            info!("Starting Docker service on macOS");
            let output = Command::new("open")
                .arg("-a")
                .arg("Docker")
                .output()?;

            if !output.status.success() {
                let error = String::from_utf8_lossy(&output.stderr);
                warn!("Failed to start Docker service: {}", error);
                return Err(OmniAgentError::DockerInitFailed(format!(
                    "Service start failed: {}",
                    error
                )));
            }
        }

        #[cfg(target_os = "windows")]
        {
            info!("Starting Docker service on Windows");
            let output = Command::new("cmd")
                .arg("/C")
                .arg("start")
                .arg("")
                .arg("\"Docker Desktop\"")
                .output()?;

            if !output.status.success() {
                let error = String::from_utf8_lossy(&output.stderr);
                warn!("Failed to start Docker service: {}", error);
                return Err(OmniAgentError::DockerInitFailed(format!(
                    "Service start failed: {}",
                    error
                )));
            }
        }

        // Give Docker some time to start
        std::thread::sleep(std::time::Duration::from_secs(5));
        Ok(())
    }

    /// Get Docker version information
    pub async fn get_version(&self) -> OmniAgentResult<serde_json::Value> {
        debug!("Getting Docker version");
        let output = Self::run_docker_command(&["version", "--format", "{{json .}}"])?;
        
        if output.status.success() {
            let version_str = String::from_utf8_lossy(&output.stdout);
            match serde_json::from_str(&version_str) {
                Ok(version) => {
                    info!("Docker version retrieved successfully");
                    Ok(version)
                }
                Err(e) => {
                    error!("Failed to parse Docker version: {}", e);
                    Err(OmniAgentError::SerializationError(e))
                }
            }
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to get Docker version: {}", error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Check if Docker is running (ping)
    pub async fn ping(&self) -> OmniAgentResult<bool> {
        debug!("Pinging Docker daemon");
        let output = Self::run_docker_command(&["info", "--format", "{{json .}}"])?;
        
        Ok(output.status.success())
    }

    /// Run a Docker CLI command and return the output
    pub fn run_docker_command(args: &[&str]) -> OmniAgentResult<Output> {
        debug!("Running Docker command: docker {}", args.join(" "));
        
        let output = Command::new("docker")
            .args(args)
            .output()
            .map_err(|e| {
                error!("Failed to execute Docker command: {}", e);
                OmniAgentError::IoError(e)
            })?;
            
        if !output.status.success() {
            let error_msg = String::from_utf8_lossy(&output.stderr);
            debug!("Docker command failed with status {}: {}", output.status, error_msg);
        }
        
        Ok(output)
    }

    /// Get the Docker path
    pub fn docker_path(&self) -> &str {
        &self.docker_path
    }
}
$$--GLUE--$$
.\src\docker\mod.rs
$$--GLUE--$$
mod manager;
pub mod containers;
pub mod images;
pub mod volumes;
pub mod networks;
pub mod system;

// Re-export the DockerManager
pub use manager::DockerManager;
$$--GLUE--$$
.\src\docker\networks.rs
$$--GLUE--$$
use bollard::network::{
    ConnectNetworkOptions, CreateNetworkOptions, DisconnectNetworkOptions, ListNetworksOptions,
    RemoveNetworkOptions,
};
use bollard::models::Network;
use std::collections::HashMap;
use std::default::Default;
use tracing::{debug, error, info};

use crate::docker::DockerManager;
use crate::error::{OmniAgentError, OmniAgentResult};
use crate::models::networks::NetworkConfig;

impl DockerManager {
    /// List all networks
    pub async fn list_networks(&self) -> OmniAgentResult<Vec<Network>> {
        debug!("Listing networks");
        let options = ListNetworksOptions::<String>::default();

        match self.client().list_networks(Some(options)).await {
            Ok(networks) => {
                info!("Found {} networks", networks.len());
                Ok(networks)
            }
            Err(e) => {
                error!("Failed to list networks: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Create a network
    pub async fn create_network(&self, config: NetworkConfig) -> OmniAgentResult<String> {
        debug!("Creating network with name: {}", config.name);

        // Create labels
        let mut labels = HashMap::new();
        labels.insert(
            "com.omniagent.managed".to_string(),
            "true".to_string(),
        );
        if let Some(network_labels) = config.labels {
            for (key, value) in network_labels {
                labels.insert(key, value);
            }
        }

        // Build options
        let options = CreateNetworkOptions {
            name: config.name.clone(),
            driver: config.driver.unwrap_or_else(|| "bridge".to_string()),
            internal: config.internal,
            labels,
            options: config.options.unwrap_or_default(),
            ..Default::default()
        };

        // Create the network
        match self.client().create_network(options).await {
            Ok(response) => {
                let id = response.id.unwrap_or_else(|| "unknown".to_string());
                info!("Network created: {} ({})", config.name, id);
                Ok(id)
            }
            Err(e) => {
                error!("Failed to create network: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Inspect a network
    pub async fn inspect_network(&self, id: &str) -> OmniAgentResult<Network> {
        debug!("Inspecting network: {}", id);
        
        match self.client().inspect_network(id, None).await {
            Ok(network) => {
                info!("Network inspected: {}", id);
                Ok(network)
            }
            Err(e) => {
                error!("Failed to inspect network {}: {}", id, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Remove a network
    pub async fn remove_network(&self, id: &str) -> OmniAgentResult<()> {
        debug!("Removing network: {}", id);
        
        let options = RemoveNetworkOptions {};
        
        match self.client().remove_network(id).await {
            Ok(_) => {
                info!("Network removed: {}", id);
                Ok(())
            }
            Err(e) => {
                error!("Failed to remove network {}: {}", id, e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Connect a container to a network
    pub async fn connect_container_to_network(
        &self,
        network_id: &str,
        container_id: &str,
    ) -> OmniAgentResult<()> {
        debug!(
            "Connecting container {} to network {}",
            container_id, network_id
        );
        
        let options = ConnectNetworkOptions {
            container: container_id,
            ..Default::default()
        };
        
        match self.client().connect_network(network_id, options).await {
            Ok(_) => {
                info!(
                    "Container {} connected to network {}",
                    container_id, network_id
                );
                Ok(())
            }
            Err(e) => {
                error!(
                    "Failed to connect container {} to network {}: {}",
                    container_id, network_id, e
                );
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Disconnect a container from a network
    pub async fn disconnect_container_from_network(
        &self,
        network_id: &str,
        container_id: &str,
        force: bool,
    ) -> OmniAgentResult<()> {
        debug!(
            "Disconnecting container {} from network {} (force: {})",
            container_id, network_id, force
        );
        
        let options = DisconnectNetworkOptions {
            container: container_id,
            force,
        };
        
        match self.client().disconnect_network(network_id, options).await {
            Ok(_) => {
                info!(
                    "Container {} disconnected from network {}",
                    container_id, network_id
                );
                Ok(())
            }
            Err(e) => {
                error!(
                    "Failed to disconnect container {} from network {}: {}",
                    container_id, network_id, e
                );
                Err(OmniAgentError::DockerError(e))
            }
        }
    }

    /// Prune unused networks
    pub async fn prune_networks(&self) -> OmniAgentResult<u64> {
        debug!("Pruning unused networks");
        
        match self.client().prune_networks(None).await {
            Ok(response) => {
                let networks_deleted = response.networks_deleted.unwrap_or_default().len() as u64;
                
                info!("Pruned {} networks", networks_deleted);
                Ok(networks_deleted)
            }
            Err(e) => {
                error!("Failed to prune networks: {}", e);
                Err(OmniAgentError::DockerError(e))
            }
        }
    }
}
$$--GLUE--$$
.\src\docker\system.rs
$$--GLUE--$$
// src/docker/system.rs
use serde_json::Value;
use std::time::Duration;
use tokio::time::{sleep, timeout};
use tracing::{debug, error, info, warn};

use crate::docker::DockerManager;
use crate::error::{OmniAgentError, OmniAgentResult};
use crate::models::system::{EventInfo, EventsResponse, SystemHealthResponse, SystemMetrics, SystemPruneResponse};

impl DockerManager {
    /// Get system information
    pub async fn get_system_info(&self) -> OmniAgentResult<Value> {
        debug!("Getting system information");
        
        let args = vec!["system", "info", "--format", "{{json .}}"];
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            let stdout = String::from_utf8_lossy(&output.stdout);
            
            match serde_json::from_str::<Value>(&stdout) {
                Ok(info) => {
                    info!("System information retrieved successfully");
                    Ok(info)
                }
                Err(e) => {
                    error!("Failed to parse system info JSON: {}", e);
                    Err(OmniAgentError::SerializationError(e))
                }
            }
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to get system information: {}", error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Get system events with a timeout
    pub async fn get_system_events(&self, timeout_secs: u64) -> OmniAgentResult<EventsResponse> {
        debug!("Getting system events with timeout: {} seconds", timeout_secs);
        
        // Use the --since and --until flags to get events from a specific time range
        // Here we get events from the last 'timeout_secs' seconds
        let since = format!("{}s", timeout_secs);
        let args = vec!["system", "events", "--format", "{{json .}}", "--since", &since];
        
        // We use tokio::time::timeout to limit the execution time
        let timeout_duration = Duration::from_secs(timeout_secs + 2); // Add 2 seconds buffer
        
        match timeout(timeout_duration, Self::run_docker_command(&args)).await {
            Ok(cmd_result) => {
                match cmd_result {
                    Ok(output) => {
                        if output.status.success() {
                            let stdout = String::from_utf8_lossy(&output.stdout);
                            let event_lines: Vec<&str> = stdout.lines().collect();
                            let mut events = Vec::with_capacity(event_lines.len());
                            
                            for line in event_lines {
                                if line.trim().is_empty() {
                                    continue;
                                }
                                
                                match serde_json::from_str::<Value>(line) {
                                    Ok(event_json) => {
                                        // Extract event information from JSON
                                        let event_type = event_json["Type"].as_str().unwrap_or_default().to_string();
                                        let action = event_json["Action"].as_str().unwrap_or_default().to_string();
                                        
                                        let actor_id = event_json["Actor"]["ID"].as_str().unwrap_or_default().to_string();
                                        let actor_name = event_json["Actor"]["Attributes"]["name"].as_str().map(|s| s.to_string());
                                        
                                        let time = event_json["time"].as_u64().unwrap_or(0);
                                        
                                        let event_info = EventInfo {
                                            event_type,
                                            action,
                                            actor_id,
                                            actor_name,
                                            time,
                                        };
                                        
                                        events.push(event_info);
                                    }
                                    Err(e) => {
                                        error!("Failed to parse event JSON: {}", e);
                                        error!("Invalid JSON: {}", line);
                                        // Continue with other events
                                    }
                                }
                            }
                            
                            let count = events.len();
                            info!("Retrieved {} system events", count);
                            
                            Ok(EventsResponse { events, count })
                        } else {
                            let error = String::from_utf8_lossy(&output.stderr);
                            error!("Failed to get system events: {}", error);
                            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
                        }
                    }
                    Err(e) => {
                        error!("Failed to execute system events command: {}", e);
                        Err(OmniAgentError::IoError(e))
                    }
                }
            }
            Err(_) => {
                warn!("Timeout occurred while collecting system events");
                // Return empty events instead of error on timeout
                Ok(EventsResponse { events: Vec::new(), count: 0 })
            }
        }
    }

    /// Ping the Docker daemon
    pub async fn ping(&self) -> OmniAgentResult<bool> {
        debug!("Pinging Docker daemon");
        
        // Simple ping via 'docker info' with a short timeout
        let args = vec!["info", "--format", "{{.ServerVersion}}"];
        
        match timeout(Duration::from_secs(2), Self::run_docker_command(&args)).await {
            Ok(cmd_result) => {
                match cmd_result {
                    Ok(output) => {
                        let success = output.status.success();
                        if success {
                            info!("Docker daemon is responsive");
                        } else {
                            let error = String::from_utf8_lossy(&output.stderr);
                            error!("Docker daemon ping failed: {}", error);
                        }
                        Ok(success)
                    }
                    Err(e) => {
                        error!("Failed to execute Docker ping command: {}", e);
                        Ok(false)
                    }
                }
            }
            Err(_) => {
                error!("Timeout occurred during Docker ping");
                Ok(false)
            }
        }
    }

    /// Get system metrics
    pub async fn get_system_metrics(&self) -> OmniAgentResult<SystemMetrics> {
        debug!("Getting system metrics");
        
        // Get Docker system info
        let info_value = self.get_system_info().await?;
        
        // Extract metrics from the system info
        let metrics = SystemMetrics {
            containers_running: info_value["ContainersRunning"].as_i64().unwrap_or(0),
            containers_total: info_value["Containers"].as_i64().unwrap_or(0),
            containers_paused: info_value["ContainersPaused"].as_i64().unwrap_or(0),
            containers_stopped: info_value["ContainersStopped"].as_i64().unwrap_or(0),
            images: info_value["Images"].as_i64().unwrap_or(0),
            memory_total: info_value["MemTotal"].as_i64().unwrap_or(0),
            cpu_count: info_value["NCPU"].as_i64().unwrap_or(0),
            docker_version: info_value["ServerVersion"].as_str().unwrap_or_default().to_string(),
            os_type: info_value["OperatingSystem"].as_str().unwrap_or_default().to_string(),
            architecture: info_value["Architecture"].as_str().unwrap_or_default().to_string(),
            kernel_version: info_value["KernelVersion"].as_str().unwrap_or_default().to_string(),
        };
        
        Ok(metrics)
    }

    /// Prune unused Docker resources (containers, networks, volumes, and images)
    pub async fn prune_system(&self, prune_volumes: bool) -> OmniAgentResult<u64> {
        debug!("Pruning system resources (prune volumes: {})", prune_volumes);
        
        let mut args = vec!["system", "prune", "--all", "--force"];
        
        if prune_volumes {
            args.push("--volumes");
        }
        
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            let stdout = String::from_utf8_lossy(&output.stdout);
            
            // Try to extract the space reclaimed from the output
            // Output typically contains a line like "Total reclaimed space: 1.123GB"
            let mut space_reclaimed: u64 = 0;
            for line in stdout.lines() {
                if line.contains("Total reclaimed space:") {
                    // Parse the number, handling different units (KB, MB, GB)
                    let parts: Vec<&str> = line.split_whitespace().collect();
                    if parts.len() >= 4 {
                        if let Ok(size) = parts[3].parse::<f64>() {
                            let unit = parts[4];
                            let multiplier = match unit {
                                "B" => 1,
                                "KB" => 1024,
                                "MB" => 1024 * 1024,
                                "GB" => 1024 * 1024 * 1024,
                                _ => 1,
                            };
                            
                            space_reclaimed = (size * multiplier as f64) as u64;
                            break;
                        }
                    }
                }
            }
            
            info!("System pruned, reclaimed {} bytes", space_reclaimed);
            Ok(space_reclaimed)
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to prune system: {}", error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }
}
$$--GLUE--$$
.\src\docker\volumes.rs
$$--GLUE--$$
// src/docker/volumes.rs
use std::collections::HashMap;
use tracing::{debug, error, info};
use serde_json::Value;

use crate::docker::DockerManager;
use crate::error::{OmniAgentError, OmniAgentResult};
use crate::models::volumes::{VolumeConfig, VolumeDetails, VolumesList};

impl DockerManager {
    /// List all volumes
    pub async fn list_volumes(&self) -> OmniAgentResult<VolumesList> {
        debug!("Listing volumes");
        
        let args = vec!["volume", "ls", "--format", "{{json .}}"];
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            let stdout = String::from_utf8_lossy(&output.stdout);
            
            // Docker CLI outputs one JSON object per line
            let volume_lines: Vec<&str> = stdout.lines().collect();
            let mut volumes = Vec::with_capacity(volume_lines.len());
            
            for line in volume_lines {
                if line.trim().is_empty() {
                    continue;
                }
                
                match serde_json::from_str::<Value>(line) {
                    Ok(volume_json) => {
                        let name = volume_json["Name"].as_str().unwrap_or_default().to_string();
                        
                        // Get detailed information for each volume
                        match self.inspect_volume(&name).await {
                            Ok(details) => volumes.push(details),
                            Err(e) => {
                                error!("Failed to get details for volume {}: {}", name, e);
                                // Continue with other volumes
                            }
                        }
                    }
                    Err(e) => {
                        error!("Failed to parse volume JSON: {}", e);
                        error!("Invalid JSON: {}", line);
                        // Continue with other volumes
                    }
                }
            }
            
            let count = volumes.len();
            info!("Found {} volumes", count);
            
            Ok(VolumesList { volumes, count })
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to list volumes: {}", error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Create a volume
    pub async fn create_volume(&self, config: VolumeConfig) -> OmniAgentResult<VolumeDetails> {
        debug!("Creating volume with name: {}", config.name);
        
        // Build the command with volume name
        let mut args = vec!["volume", "create", "--name", &config.name];
        
        // Add driver if specified
        if let Some(driver) = &config.driver {
            args.push("--driver");
            args.push(driver);
        }
        
        // Add driver options if specified
        if let Some(driver_opts) = &config.driver_opts {
            for (key, value) in driver_opts {
                args.push("--opt");
                args.push(&format!("{}={}", key, value));
            }
        }
        
        // Add labels
        args.push("--label");
        args.push("com.omniagent.managed=true");
        
        if let Some(labels) = &config.labels {
            for (key, value) in labels {
                args.push("--label");
                args.push(&format!("{}={}", key, value));
            }
        }
        
        // Execute the command
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            let volume_name = String::from_utf8_lossy(&output.stdout).trim().to_string();
            info!("Volume created: {}", volume_name);
            
            // Get detailed information about the created volume
            self.inspect_volume(&volume_name).await
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to create volume: {}", error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Inspect a volume
    pub async fn inspect_volume(&self, name: &str) -> OmniAgentResult<VolumeDetails> {
        debug!("Inspecting volume: {}", name);
        
        let args = vec!["volume", "inspect", "--format", "{{json .}}", name];
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            let stdout = String::from_utf8_lossy(&output.stdout);
            
            match serde_json::from_str::<Value>(&stdout) {
                Ok(volume_json) => {
                    // Extract volume information from JSON
                    let name = volume_json["Name"].as_str().unwrap_or_default().to_string();
                    let driver = volume_json["Driver"].as_str().unwrap_or_default().to_string();
                    let mountpoint = volume_json["Mountpoint"].as_str().unwrap_or_default().to_string();
                    let scope = volume_json["Scope"].as_str().unwrap_or_default().to_string();
                    
                    // Get creation time
                    let created_at = volume_json["CreatedAt"].as_str().unwrap_or_default().to_string();
                    
                    // Extract labels
                    let mut labels = HashMap::new();
                    if let Some(labels_obj) = volume_json["Labels"].as_object() {
                        for (key, value) in labels_obj {
                            if let Some(val_str) = value.as_str() {
                                labels.insert(key.clone(), val_str.to_string());
                            }
                        }
                    }
                    
                    let volume_details = VolumeDetails {
                        name,
                        driver,
                        mountpoint,
                        scope,
                        labels,
                        created_at,
                    };
                    
                    Ok(volume_details)
                }
                Err(e) => {
                    error!("Failed to parse volume inspect JSON: {}", e);
                    Err(OmniAgentError::SerializationError(e))
                }
            }
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to inspect volume {}: {}", name, error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Remove a volume
    pub async fn remove_volume(&self, name: &str, force: bool) -> OmniAgentResult<()> {
        debug!("Removing volume: {} (force: {})", name, force);
        
        let mut args = vec!["volume", "rm"];
        
        if force {
            args.push("--force");
        }
        
        args.push(name);
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            info!("Volume removed: {}", name);
            Ok(())
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to remove volume {}: {}", name, error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }

    /// Prune unused volumes
    pub async fn prune_volumes(&self) -> OmniAgentResult<u64> {
        debug!("Pruning unused volumes");
        
        let args = vec!["volume", "prune", "--force", "--format", "{{json .}}"];
        let output = Self::run_docker_command(&args)?;
        
        if output.status.success() {
            let stdout = String::from_utf8_lossy(&output.stdout);
            
            // Try to parse the JSON output
            let mut space_reclaimed: u64 = 0;
            
            match serde_json::from_str::<Value>(&stdout) {
                Ok(json) => {
                    // The output format varies between Docker versions
                    // Try different possible JSON structures
                    if let Some(space) = json["SpaceReclaimed"].as_u64() {
                        space_reclaimed = space;
                    } else if let Some(space_str) = json["SpaceReclaimed"].as_str() {
                        // Handle the case where space is a string like "1.2 GB"
                        // This is a simplification; actual parsing would be more complex
                        if let Some(num_str) = space_str.split_whitespace().next() {
                            if let Ok(num) = num_str.parse::<f64>() {
                                // Assume bytes if no unit
                                space_reclaimed = num as u64;
                            }
                        }
                    }
                },
                Err(_) => {
                    // If not JSON, try to parse the text output
                    // Output might be like: "Total reclaimed space: 100 B"
                    for line in stdout.lines() {
                        if line.contains("Total reclaimed space:") {
                            let parts: Vec<&str> = line.split_whitespace().collect();
                            if parts.len() >= 4 {
                                if let Ok(size) = parts[3].parse::<f64>() {
                                    let unit = if parts.len() > 4 { parts[4] } else { "B" };
                                    let multiplier = match unit {
                                        "B" => 1,
                                        "KB" => 1024,
                                        "MB" => 1024 * 1024,
                                        "GB" => 1024 * 1024 * 1024,
                                        _ => 1,
                                    };
                                    
                                    space_reclaimed = (size * multiplier as f64) as u64;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            
            info!("Volumes pruned, reclaimed {} bytes", space_reclaimed);
            Ok(space_reclaimed)
        } else {
            let error = String::from_utf8_lossy(&output.stderr);
            error!("Failed to prune volumes: {}", error);
            Err(OmniAgentError::CommandExecutionFailed(error.to_string()))
        }
    }
}
$$--GLUE--$$
.\src\error.rs
$$--GLUE--$$
use std::io;
use thiserror::Error;

#[derive(Error, Debug)]
pub enum OmniAgentError {
    #[error("Docker error: {0}")]
    DockerError(#[from] bollard::errors::Error),
    
    #[error("IO error: {0}")]
    IoError(#[from] io::Error),
    
    #[error("Docker not installed")]
    DockerNotInstalled,
    
    #[error("Docker not running")]
    DockerNotRunning,
    
    #[error("Docker initialization failed: {0}")]
    DockerInitFailed(String),
    
    #[error("Docker command execution failed: {0}")]
    CommandExecutionFailed(String),
    
    #[error("Platform not supported: {0}")]
    PlatformNotSupported(String),
    
    #[error("HTTP request error: {0}")]
    RequestError(#[from] reqwest::Error),
    
    #[error("Serialization error: {0}")]
    SerializationError(#[from] serde_json::Error),
    
    #[error("Rocket server error")]
    RocketError,
    
    #[error("Resource not found: {0}")]
    NotFound(String),
    
    #[error("Invalid parameter: {0}")]
    InvalidParameter(String),
    
    #[error("Authentication error: {0}")]
    AuthenticationError(String),
    
    #[error("Authorization error: {0}")]
    AuthorizationError(String),
    
    #[error("Resource conflict: {0}")]
    ResourceConflict(String),
    
    #[error("Resource limit exceeded: {0}")]
    ResourceLimitExceeded(String),
    
    #[error("Operation timeout: {0}")]
    OperationTimeout(String),
    
    #[error("Director communication error: {0}")]
    DirectorCommunicationError(String),
    
    #[error("Unknown error: {0}")]
    Unknown(String),
}

pub type OmniAgentResult<T> = Result<T, OmniAgentError>;
$$--GLUE--$$
.\src\lib.rs
$$--GLUE--$$
pub mod error;
pub mod docker;
pub mod api;
pub mod auth;
pub mod metrics;
pub mod models;

// Re-export commonly used items
pub use error::{OmniAgentError, OmniAgentResult};
$$--GLUE--$$
.\src\main.rs
$$--GLUE--$$
use omniagent::api::configure_routes;
use omniagent::api::metrics;
// use omniagent::auth::middleware::TokenStore;
// use omniagent::auth::middleware::initialize_auth;
use omniagent::docker::DockerManager;
use omniagent::error::OmniAgentResult;
use omniagent::metrics::{MetricsCollector, SystemMetricsSnapshot};
use omniagent::models::agent::AgentInfo;
use omniagent::api::agent::initialize_agent_info;
use omniagent::api::agent::start_heartbeat_task;
use std::net::IpAddr;
use std::net::Ipv4Addr;
use std::sync::Arc;
use std::time::SystemTime;
use tokio::sync::{Mutex, RwLock};
use tracing::{error, info};
use console::{style, Term};

const BANNER: &str = r#"
   ____  __  __ _   _ _____             _____ ______ _   _ _______ 
  / __ \|  \/  | \ | |_   _|      /\   / ____|  ____| \ | |__   __|
 | |  | | \  / |  \| | | |       /  \ | |  __| |__  |  \| |  | |   
 | |  | | |\/| | . ` | | |      / /\ \| | |_ |  __| | . ` |  | |   
 | |__| | |  | | |\  |_| |_    / ____ \ |__| | |____| |\  |  | |   
  \____/|_|  |_|_| \_|_____|  /_/    \_\_____|______|_| \_|  |_|   v{}"#;

/// Application state
struct AppState {
    docker_manager: Arc<Mutex<DockerManager>>,
    metrics_collector: Arc<MetricsCollector>,
    agent_info: Arc<RwLock<AgentInfo>>,
    start_time: SystemTime,
}

/// Print startup message with ASCII art
async fn print_startup_message() {
    let term = Term::stdout();
    let _ = term.clear_screen();
    
    // Print banner with version
    println!("{}", style(BANNER.replace("{}", env!("CARGO_PKG_VERSION"))).cyan().bold());
    println!();
    
    // Print startup information
    println!("{}", style("═════════════════════════════════════════════════════").cyan());
    println!("{} {}", style("▶").green().bold(), style("STARTING DOCKER AGENT").white().bold());
    println!("{}", style("═════════════════════════════════════════════════════").cyan());
    println!();
}

/// Print status message with symbol
async fn print_status_message(message: &str, success: bool) {
    let status_symbol = if success { "✓" } else { "✗" };
    let status_style = if success { style(status_symbol).green().bold() } else { style(status_symbol).red().bold() };
    
    println!("  {} {}", status_style, style(message).white());
}

#[rocket::main]
async fn main() -> OmniAgentResult<()> {
    // Print startup banner before initializing logging
    print_startup_message().await;
    
    // Initialize logging with tracing
    tracing_subscriber::fmt()
        .with_env_filter(
            tracing_subscriber::EnvFilter::try_from_default_env()
                .unwrap_or_else(|_| "omniagent=info".into()),
        )
        .with_file(true)
        .with_line_number(true)
        .init();

    // Initialize Docker manager
    println!("{}", style("INITIALIZING SERVICES").yellow().bold());
    let docker_manager = match DockerManager::new().await {
        Ok(manager) => {
            print_status_message("Docker manager initialized successfully", true).await;
            manager
        },
        Err(e) => {
            print_status_message(&format!("Docker initialization failed: {}", e), false).await;
            println!("  {} {}", style("⟳").yellow().bold(), style("Attempting automatic initialization...").white());
            
            match DockerManager::initialize().await {
                Ok(manager) => {
                    print_status_message("Docker successfully initialized", true).await;
                    manager
                }
                Err(e) => {
                    print_status_message(&format!("Automatic initialization failed: {}", e), false).await;
                    return Err(e);
                }
            }
        }
    };

    // Initialize authentication
    let token_store = initialize_auth();
    print_status_message("Authentication service initialized", true).await;

    // Initialize agent information
    let agent_info = Arc::new(RwLock::new(initialize_agent_info()));
    print_status_message("Agent information initialized", true).await;

    // Start agent heartbeat task
    start_heartbeat_task(agent_info.clone());
    print_status_message("Agent heartbeat service started", true).await;

    // Create application state
    let start_time = SystemTime::now();
    let docker_manager = Arc::new(Mutex::new(docker_manager));
    
    // Initialize metrics collector
    let metrics_collector = Arc::new(MetricsCollector::new(
        Arc::new(RwLock::new(docker_manager.lock().await.clone())),
        30, // Collect metrics every 30 seconds
    ));
    metrics_collector.start_collection_task();
    print_status_message("Metrics collection service started", true).await;
    
    let app_state = AppState { 
        docker_manager, 
        metrics_collector: metrics_collector.clone(),
        agent_info: agent_info.clone(),
        start_time,
    };
    
    // Start the API server
    println!();
    println!("{}", style("STARTING API SERVER").yellow().bold());
    print_status_message("Configuring API endpoints", true).await;
    
    println!();
    println!("{}", style("═════════════════════════════════════════════════════").cyan());
    println!("{} {}", 
        style("▶").green().bold(), 
        style("OMNI AGENT READY").white().bold()
    );
    println!("{}", style("═════════════════════════════════════════════════════").cyan());
    println!("  {} {}", style("API:").yellow().bold(), style("http://localhost:8081/api").white());
    println!("  {} {}", style("METRICS:").yellow().bold(), style("http://localhost:8081/metrics").white());
    println!("  {} {}", style("DOCKER TCP:").yellow().bold(), style("localhost:2375").white());
    println!("{}", style("═════════════════════════════════════════════════════").cyan());
    
    // Start the Rocket server with all our API routes
    let rocket_config = rocket::Config {
        address: IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)),
        port: 8081,
        ..rocket::Config::default()
    };
    
    let _ = rocket::custom(rocket_config)
        .manage(app_state)
        .manage(token_store)
        .manage(metrics_collector)
        .manage(agent_info)
        .mount("/api", configure_routes())
        .mount("/metrics", metrics::routes())
        .launch()
        .await
        .expect("Failed to launch Rocket server");

    Ok(())
}
$$--GLUE--$$
.\src\metrics\collector.rs
$$--GLUE--$$
use std::sync::Arc;
use std::time::Duration;
use tokio::sync::RwLock;
use tracing::{debug, error, info};

use crate::docker::DockerManager;
use crate::error::OmniAgentResult;
use crate::models::system::SystemMetrics;

/// Snapshot of system metrics
#[derive(Debug, Clone)]
pub struct SystemMetricsSnapshot {
    /// System metrics
    pub metrics: SystemMetrics,
    /// Timestamp when metrics were collected (milliseconds since epoch)
    pub timestamp: u64,
}

/// Metrics collector for system resource utilization
pub struct MetricsCollector {
    /// Docker manager
    docker_manager: Arc<RwLock<DockerManager>>,
    /// Latest metrics snapshot
    latest: Arc<RwLock<Option<SystemMetricsSnapshot>>>,
    /// Collection interval in seconds
    interval_secs: u64,
}

impl MetricsCollector {
    /// Create a new metrics collector
    pub fn new(docker_manager: Arc<RwLock<DockerManager>>, interval_secs: u64) -> Self {
        MetricsCollector {
            docker_manager,
            latest: Arc::new(RwLock::new(None)),
            interval_secs,
        }
    }

    /// Start the metrics collection task
    pub fn start_collection_task(&self) {
        let docker_manager = self.docker_manager.clone();
        let latest = self.latest.clone();
        let interval = Duration::from_secs(self.interval_secs);

        tokio::spawn(async move {
            let mut interval_timer = tokio::time::interval(interval);

            loop {
                interval_timer.tick().await;
                debug!("Collecting system metrics");

                // Use a read lock first to minimize contention
                let docker = docker_manager.read().await;
                match docker.get_system_metrics().await {
                    Ok(metrics) => {
                        // Get current timestamp in milliseconds
                        let timestamp = std::time::SystemTime::now()
                            .duration_since(std::time::UNIX_EPOCH)
                            .unwrap_or_default()
                            .as_millis() as u64;

                        let snapshot = SystemMetricsSnapshot {
                            metrics,
                            timestamp,
                        };

                        // Update the latest snapshot
                        let mut latest_writer = latest.write().await;
                        *latest_writer = Some(snapshot);
                        
                        debug!("System metrics collected successfully");
                    }
                    Err(e) => {
                        error!("Failed to collect system metrics: {}", e);
                    }
                }
            }
        });
        
        info!("Metrics collection task started with interval of {} seconds", self.interval_secs);
    }

    /// Get the latest metrics snapshot
    pub async fn get_latest(&self) -> Option<SystemMetricsSnapshot> {
        let latest = self.latest.read().await;
        latest.clone()
    }

    /// Manually collect metrics now
    pub async fn collect_now(&self) -> OmniAgentResult<SystemMetricsSnapshot> {
        let docker = self.docker_manager.read().await;
        
        // Collect metrics
        let metrics = docker.get_system_metrics().await?;
        
        // Get current timestamp in milliseconds
        let timestamp = std::time::SystemTime::now()
            .duration_since(std::time::UNIX_EPOCH)
            .unwrap_or_default()
            .as_millis() as u64;
        
        let snapshot = SystemMetricsSnapshot {
            metrics,
            timestamp,
        };
        
        // Update the latest snapshot
        let mut latest_writer = self.latest.write().await;
        *latest_writer = Some(snapshot.clone());
        
        Ok(snapshot)
    }
}

/// Additional system metrics functions that could be added in the future:
/// - Disk usage statistics
/// - Network bandwidth utilization
/// - Custom resource limits and quotas
/// - Historical metrics storage and trending
/// - Alerts based on threshold crossing

/// Helper function to create formatted metric labels for Prometheus-style metrics
pub fn format_metric(name: &str, value: &str, labels: Option<&[(&str, &str)]>) -> String {
    if let Some(labels) = labels {
        let labels_str = labels
            .iter()
            .map(|(k, v)| format!("{}=\"{}\"", k, v))
            .collect::<Vec<_>>()
            .join(",");
            
        format!("{}{{{}}} {}", name, labels_str, value)
    } else {
        format!("{} {}", name, value)
    }
}

/// Export metrics in Prometheus format
pub async fn export_prometheus_metrics(collector: &MetricsCollector) -> OmniAgentResult<String> {
    let snapshot = match collector.get_latest().await {
        Some(snapshot) => snapshot,
        None => collector.collect_now().await?,
    };
    
    let metrics = snapshot.metrics;
    let timestamp = snapshot.timestamp;
    
    // Build Prometheus-formatted metrics
    let mut output = String::new();
    
    // Add metadata
    output.push_str("# HELP omniagent_containers_running Number of running containers\n");
    output.push_str("# TYPE omniagent_containers_running gauge\n");
    output.push_str(&format!("omniagent_containers_running {}\n", metrics.containers_running));
    
    output.push_str("# HELP omniagent_containers_total Total number of containers\n");
    output.push_str("# TYPE omniagent_containers_total gauge\n");
    output.push_str(&format!("omniagent_containers_total {}\n", metrics.containers_total));
    
    output.push_str("# HELP omniagent_containers_paused Number of paused containers\n");
    output.push_str("# TYPE omniagent_containers_paused gauge\n");
    output.push_str(&format!("omniagent_containers_paused {}\n", metrics.containers_paused));
    
    output.push_str("# HELP omniagent_containers_stopped Number of stopped containers\n");
    output.push_str("# TYPE omniagent_containers_stopped gauge\n");
    output.push_str(&format!("omniagent_containers_stopped {}\n", metrics.containers_stopped));
    
    output.push_str("# HELP omniagent_images Number of images\n");
    output.push_str("# TYPE omniagent_images gauge\n");
    output.push_str(&format!("omniagent_images {}\n", metrics.images));
    
    output.push_str("# HELP omniagent_memory_total Total memory in bytes\n");
    output.push_str("# TYPE omniagent_memory_total gauge\n");
    output.push_str(&format!("omniagent_memory_total {}\n", metrics.memory_total));
    
    output.push_str("# HELP omniagent_cpu_count Number of CPUs\n");
    output.push_str("# TYPE omniagent_cpu_count gauge\n");
    output.push_str(&format!("omniagent_cpu_count {}\n", metrics.cpu_count));
    
    output.push_str("# HELP omniagent_info Agent information\n");
    output.push_str("# TYPE omniagent_info gauge\n");
    output.push_str(&format!(
        "omniagent_info{{version=\"{}\",os_type=\"{}\",architecture=\"{}\",kernel_version=\"{}\"}} 1\n",
        metrics.docker_version, metrics.os_type, metrics.architecture, metrics.kernel_version
    ));
    
    output.push_str("# HELP omniagent_metrics_timestamp Timestamp when metrics were collected\n");
    output.push_str("# TYPE omniagent_metrics_timestamp gauge\n");
    output.push_str(&format!("omniagent_metrics_timestamp {}\n", timestamp));
    
    Ok(output)
}
$$--GLUE--$$
.\src\metrics\mod.rs
$$--GLUE--$$
mod collector;

// Re-export commonly used items
pub use collector::{MetricsCollector, SystemMetricsSnapshot, export_prometheus_metrics};
$$--GLUE--$$
.\src\models\agent.rs
$$--GLUE--$$
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AgentInfo {
    pub id: String,
    pub name: String,
    pub version: String,
    pub host: String,
    pub ip_address: String,
    pub status: AgentStatus,
    pub last_heartbeat: String,
    pub director_url: Option<String>,
    pub labels: HashMap<String, String>,
    pub capabilities: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum AgentStatus {
    #[serde(rename = "connected")]
    Connected,
    #[serde(rename = "disconnected")]
    Disconnected,
    #[serde(rename = "initializing")]
    Initializing,
    #[serde(rename = "error")]
    Error,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AgentRegistrationRequest {
    pub director_url: String,
    pub token: String,
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AgentRegistrationResponse {
    pub id: String,
    pub token: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AgentUpdateRequest {
    pub labels: Option<HashMap<String, String>>,
    pub maintenance_mode: Option<bool>,
}
$$--GLUE--$$
.\src\models\containers.rs
$$--GLUE--$$
use std::collections::HashMap;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PortMapping {
    pub host: u16,
    pub container: u16,
    pub protocol: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolumeMapping {
    pub host: String,
    pub container: String,
    pub read_only: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ContainerConfig {
    pub name: String,
    pub image: String,
    pub command: Option<Vec<String>>,
    pub environment: HashMap<String, String>,
    pub ports: Option<Vec<PortMapping>>,
    pub volumes: Option<Vec<VolumeMapping>>,
    pub labels: Option<HashMap<String, String>>,
    pub restart_policy: Option<String>,
    pub network: Option<String>,
    pub auto_remove: Option<bool>,
    pub start: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ContainerDetails {
    pub id: String,
    pub name: String,
    pub image: String,
    pub status: String,
    pub created: String,
    pub ports: Vec<PortMapping>,
    pub labels: HashMap<String, String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ContainersList {
    pub containers: Vec<ContainerDetails>,
    pub count: usize,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ContainerLogs {
    pub container_id: String,
    pub logs: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExecConfig {
    pub cmd: Vec<String>,
    pub detach: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExecResponse {
    pub container_id: String,
    pub exec_id: String,
    pub output: String,
}
$$--GLUE--$$
.\src\models\images.rs
$$--GLUE--$$
use std::collections::HashMap;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ImagePullConfig {
    pub image: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ImageBuildConfig {
    pub context_path: String,
    pub dockerfile: Option<String>,
    pub tag: Option<String>,
    pub build_args: Option<HashMap<String, String>>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ImageDetails {
    pub id: String,
    pub tags: Vec<String>,
    pub created: String,
    pub size: i64,
    pub virtual_size: i64,
    pub labels: HashMap<String, String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ImagesList {
    pub images: Vec<ImageDetails>,
    pub count: usize,
}
$$--GLUE--$$
.\src\models\mod.rs
$$--GLUE--$$
pub mod containers;
pub mod images;
pub mod volumes;
pub mod networks;
pub mod system;
pub mod agent;

// Common response types
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct ApiResponse<T> {
    pub success: bool,
    pub message: Option<String>,
    pub data: Option<T>,
    pub error: Option<String>,
}

impl<T> ApiResponse<T> {
    pub fn success(data: T, message: Option<String>) -> Self {
        ApiResponse {
            success: true,
            message,
            data: Some(data),
            error: None,
        }
    }

    pub fn error(error: String) -> Self {
        ApiResponse {
            success: false,
            message: None,
            data: None,
            error: Some(error),
        }
    }
}
$$--GLUE--$$
.\src\models\networks.rs
$$--GLUE--$$
use std::collections::HashMap;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NetworkConfig {
    pub name: String,
    pub driver: Option<String>,
    pub internal: Option<bool>,
    pub options: Option<HashMap<String, String>>,
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NetworkDetails {
    pub id: String,
    pub name: String,
    pub driver: String,
    pub internal: bool,
    pub scope: String,
    pub created: String,
    pub labels: HashMap<String, String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NetworksList {
    pub networks: Vec<NetworkDetails>,
    pub count: usize,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NetworkConnectRequest {
    pub container_id: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NetworkDisconnectRequest {
    pub container_id: String,
    pub force: Option<bool>,
}
$$--GLUE--$$
.\src\models\system.rs
$$--GLUE--$$
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SystemMetrics {
    pub containers_running: i64,
    pub containers_total: i64,
    pub containers_paused: i64,
    pub containers_stopped: i64,
    pub images: i64,
    pub memory_total: i64,
    pub cpu_count: i64,
    pub docker_version: String,
    pub os_type: String,
    pub architecture: String,
    pub kernel_version: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SystemPruneRequest {
    pub volumes: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SystemPruneResponse {
    pub space_reclaimed: u64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SystemHealthResponse {
    pub status: String,
    pub docker_ping: bool,
    pub agent_version: String,
    pub uptime_seconds: u64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EventsResponse {
    pub events: Vec<EventInfo>,
    pub count: usize,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EventInfo {
    pub event_type: String,
    pub action: String,
    pub actor_id: String,
    pub actor_name: Option<String>,
    pub time: u64,
}
$$--GLUE--$$
.\src\models\volumes.rs
$$--GLUE--$$
use std::collections::HashMap;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolumeConfig {
    pub name: String,
    pub driver: Option<String>,
    pub driver_opts: Option<HashMap<String, String>>,
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolumeDetails {
    pub name: String,
    pub driver: String,
    pub mountpoint: String,
    pub scope: String,
    pub labels: HashMap<String, String>,
    pub created_at: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolumesList {
    pub volumes: Vec<VolumeDetails>,
    pub count: usize,
}